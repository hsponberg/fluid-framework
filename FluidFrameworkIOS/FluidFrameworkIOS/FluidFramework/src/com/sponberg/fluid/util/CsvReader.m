//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src-delomboked/com/sponberg/fluid/util/CsvReader.java
//

#include "IOSClass.h"
#include "com/sponberg/fluid/util/CsvReader.h"
#include "java/io/BufferedReader.h"
#include "java/io/IOException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"

@implementation FFTCsvReader

- (id)initWithJavaIoBufferedReader:(JavaIoBufferedReader *)inArg
                          withChar:(unichar)sep {
  return [self initFFTCsvReaderWithJavaIoBufferedReader:inArg withChar:sep withInt:1];
}

- (id)initFFTCsvReaderWithJavaIoBufferedReader:(JavaIoBufferedReader *)inArg
                                      withChar:(unichar)sep
                                       withInt:(int)headerRows {
  if (self = [super init]) {
    attributes_ = [[JavaUtilArrayList alloc] init];
    rows_ = [[JavaUtilArrayList alloc] init];
    if (headerRows < 1) {
      @throw [[JavaLangRuntimeException alloc] initWithNSString:@"0 headerRows not supported."];
    }
    JavaUtilArrayList *header = [self tokenizeWithNSString:[((JavaIoBufferedReader *) nil_chk(inArg)) readLine] withChar:sep];
    for (int i = 0; i < [((JavaUtilArrayList *) nil_chk(header)) size]; i++) {
      [attributes_ addWithId:[[FFTCsvReader_Attribute alloc] initWithInt:i withNSString:[header getWithInt:i]]];
    }
    for (int i = 1; i < headerRows; i++) {
      (void) [inArg readLine];
    }
    NSString *line;
    while ((line = [inArg readLine]) != nil) {
      line = [((NSString *) nil_chk(line)) trim];
      if ([((NSString *) nil_chk(line)) isEqual:@""]) {
        continue;
      }
      FFTCsvReader_Row *row = [[FFTCsvReader_Row alloc] init];
      [rows_ addWithId:row];
      JavaUtilArrayList *rowTokens = [self tokenizeWithNSString:line withChar:sep];
      for (int i = 0; i < [attributes_ size]; i++) {
        (void) [((JavaUtilHashMap *) nil_chk(row->map_)) putWithId:((FFTCsvReader_Attribute *) nil_chk([attributes_ getWithInt:i]))->name_ withId:[((JavaUtilArrayList *) nil_chk(rowTokens)) getWithInt:i]];
      }
    }
    [inArg close];
  }
  return self;
}

- (id)initWithJavaIoBufferedReader:(JavaIoBufferedReader *)inArg
                          withChar:(unichar)sep
                           withInt:(int)headerRows {
  return [self initFFTCsvReaderWithJavaIoBufferedReader:inArg withChar:sep withInt:headerRows];
}

- (BOOL)containsAttributeWithNSString:(NSString *)s {
  for (FFTCsvReader_Attribute * __strong a in nil_chk(attributes_)) {
    if ([((NSString *) nil_chk([((FFTCsvReader_Attribute *) nil_chk(a)) getName])) isEqual:s]) {
      return YES;
    }
  }
  return NO;
}

- (JavaUtilArrayList *)getAttributes {
  return attributes_;
}

- (JavaUtilArrayList *)getRows {
  return rows_;
}

- (JavaUtilArrayList *)tokenizeWithNSString:(NSString *)line
                                   withChar:(unichar)sep {
  JavaUtilArrayList *list = [[JavaUtilArrayList alloc] init];
  JavaLangStringBuilder *token = [[JavaLangStringBuilder alloc] init];
  BOOL insideQuote = NO;
  for (int i = 0; i < ((int) [((NSString *) nil_chk(line)) length]); i++) {
    unichar c = [line charAtWithInt:i];
    if (c == sep && !insideQuote) {
      [list addWithId:[token description]];
      token = [[JavaLangStringBuilder alloc] init];
    }
    else if (c == sep) {
      if (insideQuote) {
        insideQuote = NO;
      }
      else if ([token sequenceLength] == 0) {
        insideQuote = YES;
      }
      else {
        (void) [token appendWithChar:c];
      }
    }
    else if (c == '"') {
      insideQuote = YES;
    }
    else {
      (void) [token appendWithChar:c];
    }
  }
  [list addWithId:[token description]];
  return list;
}

- (void)copyAllFieldsTo:(FFTCsvReader *)other {
  [super copyAllFieldsTo:other];
  other->attributes_ = attributes_;
  other->rows_ = rows_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithJavaIoBufferedReader:withChar:", "CsvReader", NULL, 0x1, "Ljava.io.IOException;" },
    { "initWithJavaIoBufferedReader:withChar:withInt:", "CsvReader", NULL, 0x1, "Ljava.io.IOException;" },
    { "containsAttributeWithNSString:", "containsAttribute", "Z", 0x1, NULL },
    { "getAttributes", NULL, "Ljava.util.ArrayList;", 0x1, NULL },
    { "getRows", NULL, "Ljava.util.ArrayList;", 0x1, NULL },
    { "tokenizeWithNSString:withChar:", "tokenize", "Ljava.util.ArrayList;", 0x0, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "attributes_", NULL, 0x12, "Ljava.util.ArrayList;", NULL,  },
    { "rows_", NULL, 0x12, "Ljava.util.ArrayList;", NULL,  },
  };
  static J2ObjcClassInfo _FFTCsvReader = { "CsvReader", "com.sponberg.fluid.util", NULL, 0x1, 6, methods, 2, fields, 0, NULL};
  return &_FFTCsvReader;
}

@end

@implementation FFTCsvReader_Attribute

- (id)initWithInt:(int)index
     withNSString:(NSString *)name {
  if (self = [super init]) {
    self->index_ = index;
    self->name_ = name;
  }
  return self;
}

- (int)getIndex {
  return index_;
}

- (NSString *)getName {
  return name_;
}

- (void)copyAllFieldsTo:(FFTCsvReader_Attribute *)other {
  [super copyAllFieldsTo:other];
  other->index_ = index_;
  other->name_ = name_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithInt:withNSString:", "Attribute", NULL, 0x1, NULL },
    { "getIndex", NULL, "I", 0x1, NULL },
    { "getName", NULL, "Ljava.lang.String;", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "index_", NULL, 0x12, "I", NULL,  },
    { "name_", NULL, 0x12, "Ljava.lang.String;", NULL,  },
  };
  static J2ObjcClassInfo _FFTCsvReader_Attribute = { "Attribute", "com.sponberg.fluid.util", "CsvReader", 0x9, 3, methods, 2, fields, 0, NULL};
  return &_FFTCsvReader_Attribute;
}

@end

@implementation FFTCsvReader_Row

- (NSString *)getWithNSString:(NSString *)key {
  return [((JavaUtilHashMap *) nil_chk(map_)) getWithId:key];
}

- (id<JavaUtilCollection>)getAllValues {
  return [((JavaUtilHashMap *) nil_chk(map_)) values];
}

- (id)init {
  if (self = [super init]) {
    map_ = [[JavaUtilHashMap alloc] init];
  }
  return self;
}

- (void)copyAllFieldsTo:(FFTCsvReader_Row *)other {
  [super copyAllFieldsTo:other];
  other->map_ = map_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "getWithNSString:", "get", "Ljava.lang.String;", 0x1, NULL },
    { "getAllValues", NULL, "Ljava.util.Collection;", 0x1, NULL },
    { "init", NULL, NULL, 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "map_", NULL, 0x12, "Ljava.util.HashMap;", NULL,  },
  };
  static J2ObjcClassInfo _FFTCsvReader_Row = { "Row", "com.sponberg.fluid.util", "CsvReader", 0x9, 3, methods, 1, fields, 0, NULL};
  return &_FFTCsvReader_Row;
}

@end
