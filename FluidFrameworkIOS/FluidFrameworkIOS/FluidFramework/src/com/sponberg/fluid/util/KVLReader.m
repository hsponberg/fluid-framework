//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src-delomboked/com/sponberg/fluid/util/KVLReader.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "com/sponberg/fluid/util/KVLReader.h"
#include "com/sponberg/fluid/util/KeyValueList.h"
#include "com/sponberg/fluid/util/KeyValueListModifyable.h"
#include "java/io/BufferedReader.h"
#include "java/io/IOException.h"
#include "java/io/StringReader.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "java/util/Stack.h"

BOOL FFTKVLReader_initialized = NO;

@implementation FFTKVLReader

id<JavaUtilList> FFTKVLReader_emptyList_;
id<JavaUtilList> FFTKVLReader_emptyValueList_;

- (id)initWithNSString:(NSString *)data {
  if (self = [super init]) {
    root_ = [[FFTKVLReader_KeyValueListDefault alloc] initWithNSString:@"root"];
    JavaIoBufferedReader *in = [[JavaIoBufferedReader alloc] initWithJavaIoReader:[[JavaIoStringReader alloc] initWithNSString:data]];
    @try {
      [self init__WithJavaIoBufferedReader:in];
    }
    @finally {
      [in close];
    }
  }
  return self;
}

- (id)initWithJavaIoBufferedReader:(JavaIoBufferedReader *)inArg {
  if (self = [super init]) {
    root_ = [[FFTKVLReader_KeyValueListDefault alloc] initWithNSString:@"root"];
    [self init__WithJavaIoBufferedReader:inArg];
  }
  return self;
}

- (void)init__WithJavaIoBufferedReader:(JavaIoBufferedReader *)inArg {
  JavaUtilStack *stack = [[JavaUtilStack alloc] init];
  (void) [stack pushWithId:root_];
  JavaUtilStack *keys = [[JavaUtilStack alloc] init];
  NSString *line;
  while ((line = [((JavaIoBufferedReader *) nil_chk(inArg)) readLine]) != nil) {
    int i = [((NSString *) nil_chk(line)) indexOfString:@"#"];
    while (i != -1) {
      int i2 = -1;
      if (i > 0) {
        i2 = [line indexOfString:@"\\" fromIndex:i - 1];
      }
      if (i != -1) {
        if (i2 != -1 && i2 == i - 1) {
          line = [NSString stringWithFormat:@"%@%@", [line substring:0 endIndex:i2], [line substring:i]];
          i = [line indexOfString:@"#" fromIndex:i];
        }
        else {
          line = [line substring:0 endIndex:i];
          break;
        }
      }
    }
    if (![self containsNonTabCharacterWithNSString:line]) {
      continue;
    }
    unichar c = [((NSString *) nil_chk(line)) charAtWithInt:0];
    int numTabs = 0;
    while (c == 0x0009) {
      numTabs++;
      c = [line charAtWithInt:numTabs];
    }
    line = [((NSString *) nil_chk([line substring:numTabs])) replaceFirst:@"\\s+$" withReplacement:@""];
    int stackPosition = numTabs / 2;
    while ([stack size] > stackPosition + 1) {
      (void) [stack pop];
    }
    stackPosition = (numTabs + 1) / 2;
    while ([keys size] > stackPosition) {
      (void) [keys pop];
    }
    if (numTabs % 2 == 0) {
      NSString *key = line;
      if (![((NSString *) nil_chk(key)) hasSuffix:@":"]) {
        @throw [[JavaLangRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"Key %@ must end with a ':'", key]];
      }
      (void) [keys pushWithId:[key substring:0 endIndex:((int) [key length]) - 1]];
    }
    else {
      NSString *value = line;
      id<FFTKeyValueListModifyable> currentKvl = [stack peek];
      id<FFTKeyValueListModifyable> newKvl = [[FFTKVLReader_KeyValueListDefault alloc] initWithNSString:value];
      [((id<FFTKeyValueListModifyable>) nil_chk(currentKvl)) addWithNSString:[keys peek] withFFTKeyValueList:newKvl];
      (void) [stack pushWithId:newKvl];
    }
  }
}

- (BOOL)containsNonTabCharacterWithNSString:(NSString *)s {
  {
    IOSByteArray *a__ = [((NSString *) nil_chk(s)) getBytes];
    char const *b__ = ((IOSByteArray *) nil_chk(a__))->buffer_;
    char const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      char c = (*b__++);
      if (c != 0x0009) {
        return YES;
      }
    }
  }
  return NO;
}

- (id<JavaUtilList>)getWithNSString:(NSString *)key {
  return [((id<FFTKeyValueListModifyable>) nil_chk(root_)) getWithNSString:key];
}

- (id<FFTKeyValueList>)getWithValueWithNSString:(NSString *)key
                                   withNSString:(NSString *)value {
  return [((id<FFTKeyValueListModifyable>) nil_chk(root_)) getWithValueWithNSString:key withNSString:value];
}

- (BOOL)containsWithNSString:(NSString *)key {
  id<JavaUtilList> list = [self getWithNSString:key];
  return (list != nil);
}

- (id<JavaUtilSet>)keys {
  return [((id<FFTKeyValueListModifyable>) nil_chk(root_)) keys];
}

- (NSString *)getValueWithNSString:(NSString *)key {
  return [((id<FFTKeyValueListModifyable>) nil_chk(root_)) getValueWithNSString:key];
}

- (id<JavaUtilList>)getValuesWithNSString:(NSString *)key {
  return [((id<FFTKeyValueListModifyable>) nil_chk(root_)) getValuesWithNSString:key];
}

- (void)addWithNSString:(NSString *)key
    withFFTKeyValueList:(id<FFTKeyValueList>)newKvl {
  [((id<FFTKeyValueListModifyable>) nil_chk(root_)) addWithNSString:key withFFTKeyValueList:newKvl];
}

- (void)removeWithNSString:(NSString *)key {
  [((id<FFTKeyValueListModifyable>) nil_chk(root_)) removeWithNSString:key];
}

- (void)removeByValueWithNSString:(NSString *)key
                     withNSString:(NSString *)value {
  [((id<FFTKeyValueListModifyable>) nil_chk(root_)) removeByValueWithNSString:key withNSString:value];
}

- (void)setToValueWithNSString:(NSString *)key
           withFFTKeyValueList:(id<FFTKeyValueList>)newKvl {
  [((id<FFTKeyValueListModifyable>) nil_chk(root_)) setToValueWithNSString:key withFFTKeyValueList:newKvl];
}

- (NSString *)getValue {
  return nil;
}

- (void)overwriteSettingsFromWithFFTKeyValueListModifyable:(id<FFTKeyValueListModifyable>)fromReader {
  [self overwriteSettingsWithJavaUtilStack:[[JavaUtilStack alloc] init] withFFTKeyValueListModifyable:fromReader withFFTKeyValueListModifyable:self];
}

- (void)overwriteSettingsWithJavaUtilStack:(JavaUtilStack *)keys
             withFFTKeyValueListModifyable:(id<FFTKeyValueListModifyable>)fromReader
             withFFTKeyValueListModifyable:(id<FFTKeyValueListModifyable>)toReaderRoot {
  for (NSString * __strong key in nil_chk([((id<FFTKeyValueListModifyable>) nil_chk(fromReader)) keys])) {
    (void) [((JavaUtilStack *) nil_chk(keys)) pushWithId:key];
    id<JavaUtilList> fromList = (id<JavaUtilList>) check_protocol_cast([fromReader getWithNSString:key], @protocol(JavaUtilList));
    for (id<FFTKeyValueListModifyable> __strong kvlFrom in nil_chk(fromList)) {
      if ([((id<JavaUtilSet>) nil_chk([((id<FFTKeyValueListModifyable>) nil_chk(kvlFrom)) keys])) size] == 0) {
        [self writeValueWithFFTKeyValueListModifyable:toReaderRoot withInt:0 withJavaUtilStack:keys withNSString:[kvlFrom getValue]];
      }
      else {
        (void) [keys pushWithId:[kvlFrom getValue]];
        [self overwriteSettingsWithJavaUtilStack:keys withFFTKeyValueListModifyable:kvlFrom withFFTKeyValueListModifyable:toReaderRoot];
        (void) [keys pop];
      }
    }
    (void) [keys pop];
  }
}

- (void)writeValueWithFFTKeyValueListModifyable:(id<FFTKeyValueListModifyable>)writeToKvl
                                        withInt:(int)index
                              withJavaUtilStack:(JavaUtilStack *)keys
                                   withNSString:(NSString *)value {
  NSString *key = [((JavaUtilStack *) nil_chk(keys)) getWithInt:index];
  id<JavaUtilList> writeToKvlList = (id<JavaUtilList>) check_protocol_cast([((id<FFTKeyValueListModifyable>) nil_chk(writeToKvl)) getWithNSString:key], @protocol(JavaUtilList));
  if (index == [keys size] - 1) {
    if (writeToKvlList != nil && [writeToKvlList size] > 1) {
      @throw [[JavaLangRuntimeException alloc] initWithNSString:@"Unexpected, this should be a single leaf"];
    }
    else {
      [writeToKvl setToValueWithNSString:key withFFTKeyValueList:[[FFTKVLReader_KeyValueListDefault alloc] initWithNSString:value]];
    }
  }
  else {
    NSString *kvlValue = [keys getWithInt:index + 1];
    id<FFTKeyValueListModifyable> kvlTo = nil;
    if (writeToKvlList != nil) {
      kvlTo = [self findOnListByValueWithJavaUtilList:writeToKvlList withNSString:kvlValue];
    }
    if (kvlTo == nil) {
      kvlTo = [[FFTKVLReader_KeyValueListDefault alloc] initWithNSString:kvlValue];
      [writeToKvl addWithNSString:key withFFTKeyValueList:kvlTo];
    }
    [self writeValueWithFFTKeyValueListModifyable:kvlTo withInt:index + 2 withJavaUtilStack:keys withNSString:value];
  }
}

- (id<FFTKeyValueListModifyable>)findOnListByValueWithJavaUtilList:(id<JavaUtilList>)list
                                                      withNSString:(NSString *)value {
  for (id<FFTKeyValueListModifyable> __strong searchKvl in nil_chk(list)) {
    if ([((NSString *) nil_chk([((id<FFTKeyValueListModifyable>) nil_chk(searchKvl)) getValue])) isEqual:value]) {
      return searchKvl;
    }
  }
  return nil;
}

- (id<JavaUtilList>)getOrReturnEmptyWithFFTKeyValueList:(id<FFTKeyValueList>)list
                                           withNSString:(NSString *)key {
  if ([((id<FFTKeyValueList>) nil_chk(list)) containsWithNSString:key]) {
    return (id<JavaUtilList>) check_protocol_cast([list getWithNSString:key], @protocol(JavaUtilList));
  }
  else {
    return FFTKVLReader_emptyList_;
  }
}

+ (void)initialize {
  if (self == [FFTKVLReader class]) {
    FFTKVLReader_emptyList_ = [JavaUtilCollections unmodifiableListWithJavaUtilList:[[JavaUtilArrayList alloc] init]];
    FFTKVLReader_emptyValueList_ = [JavaUtilCollections unmodifiableListWithJavaUtilList:[[JavaUtilArrayList alloc] init]];
    FFTKVLReader_initialized = YES;
  }
}

- (void)copyAllFieldsTo:(FFTKVLReader *)other {
  [super copyAllFieldsTo:other];
  other->root_ = root_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithNSString:", "KVLReader", NULL, 0x1, "Ljava.io.IOException;" },
    { "initWithJavaIoBufferedReader:", "KVLReader", NULL, 0x1, "Ljava.io.IOException;" },
    { "init__WithJavaIoBufferedReader:", "init", "V", 0x2, "Ljava.io.IOException;" },
    { "containsNonTabCharacterWithNSString:", "containsNonTabCharacter", "Z", 0x4, NULL },
    { "getWithNSString:", "get", "Ljava.util.List;", 0x1, NULL },
    { "getWithValueWithNSString:withNSString:", "getWithValue", "Lcom.sponberg.fluid.util.KeyValueList;", 0x1, NULL },
    { "containsWithNSString:", "contains", "Z", 0x1, NULL },
    { "keys", NULL, "Ljava.util.Set;", 0x1, NULL },
    { "getValueWithNSString:", "getValue", "Ljava.lang.String;", 0x1, NULL },
    { "getValuesWithNSString:", "getValues", "Ljava.util.List;", 0x1, NULL },
    { "addWithNSString:withFFTKeyValueList:", "add", "V", 0x1, NULL },
    { "removeWithNSString:", "remove", "V", 0x1, NULL },
    { "removeByValueWithNSString:withNSString:", "removeByValue", "V", 0x1, NULL },
    { "setToValueWithNSString:withFFTKeyValueList:", "setToValue", "V", 0x1, NULL },
    { "getValue", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "overwriteSettingsFromWithFFTKeyValueListModifyable:", "overwriteSettingsFrom", "V", 0x1, NULL },
    { "overwriteSettingsWithJavaUtilStack:withFFTKeyValueListModifyable:withFFTKeyValueListModifyable:", "overwriteSettings", "V", 0x4, NULL },
    { "writeValueWithFFTKeyValueListModifyable:withInt:withJavaUtilStack:withNSString:", "writeValue", "V", 0x4, NULL },
    { "findOnListByValueWithJavaUtilList:withNSString:", "findOnListByValue", "Lcom.sponberg.fluid.util.KeyValueListModifyable;", 0x4, NULL },
    { "getOrReturnEmptyWithFFTKeyValueList:withNSString:", "getOrReturnEmpty", "Ljava.util.List;", 0x4, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "root_", NULL, 0x0, "Lcom.sponberg.fluid.util.KeyValueListModifyable;", NULL,  },
    { "emptyList_", NULL, 0x18, "Ljava.util.List;", &FFTKVLReader_emptyList_,  },
    { "emptyValueList_", NULL, 0x18, "Ljava.util.List;", &FFTKVLReader_emptyValueList_,  },
  };
  static J2ObjcClassInfo _FFTKVLReader = { "KVLReader", "com.sponberg.fluid.util", NULL, 0x1, 20, methods, 3, fields, 0, NULL};
  return &_FFTKVLReader;
}

@end

@implementation FFTKVLReader_KeyValueListDefault

- (id)initWithNSString:(NSString *)value {
  if (self = [super init]) {
    kvl_ = [[JavaUtilHashMap alloc] init];
    self->value_ = value;
  }
  return self;
}

- (void)addWithNSString:(NSString *)key
    withFFTKeyValueList:(id<FFTKeyValueList>)newKvl {
  JavaUtilArrayList *list = [((JavaUtilHashMap *) nil_chk(kvl_)) getWithId:key];
  if (list == nil) {
    list = [[JavaUtilArrayList alloc] init];
    (void) [kvl_ putWithId:key withId:list];
  }
  [((JavaUtilArrayList *) nil_chk(list)) addWithId:newKvl];
}

- (void)setToValueWithNSString:(NSString *)key
           withFFTKeyValueList:(id<FFTKeyValueList>)newKvl {
  JavaUtilArrayList *list = [((JavaUtilHashMap *) nil_chk(kvl_)) getWithId:key];
  if (list == nil) {
    list = [[JavaUtilArrayList alloc] init];
    (void) [kvl_ putWithId:key withId:list];
  }
  else {
    [list clear];
  }
  [((JavaUtilArrayList *) nil_chk(list)) addWithId:newKvl];
}

- (void)removeByValueWithNSString:(NSString *)key
                     withNSString:(NSString *)value {
  JavaUtilArrayList *list = [((JavaUtilHashMap *) nil_chk(kvl_)) getWithId:key];
  if (list != nil) {
    for (id<JavaUtilIterator> i = [list iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
      if ([((NSString *) nil_chk([((id<FFTKeyValueList>) nil_chk([i next])) getValue])) isEqual:value]) {
        [i remove];
        break;
      }
    }
  }
}

- (id<JavaUtilList>)getWithNSString:(NSString *)key {
  return [((JavaUtilHashMap *) nil_chk(kvl_)) getWithId:key];
}

- (id<FFTKeyValueList>)getWithValueWithNSString:(NSString *)key
                                   withNSString:(NSString *)value {
  id<JavaUtilList> list = [self getWithNSString:key];
  if (list == nil) {
    return nil;
  }
  for (id<FFTKeyValueList> __strong searchKvl in nil_chk(list)) {
    if ([((NSString *) nil_chk([((id<FFTKeyValueList>) nil_chk(searchKvl)) getValue])) isEqual:value]) {
      return searchKvl;
    }
  }
  return nil;
}

- (BOOL)containsWithNSString:(NSString *)key {
  return [((JavaUtilHashMap *) nil_chk(kvl_)) getWithId:key] != nil;
}

- (id<JavaUtilSet>)keys {
  return [((JavaUtilHashMap *) nil_chk(kvl_)) keySet];
}

- (NSString *)getValueWithNSString:(NSString *)key {
  id<JavaUtilList> list = [self getWithNSString:key];
  if (list == nil) {
    @throw [[JavaLangRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"No value for %@", key]];
  }
  if ([((id<JavaUtilList>) nil_chk(list)) size] == 1) {
    return [((id<FFTKeyValueList>) nil_chk([list getWithInt:0])) getValue];
  }
  JavaLangStringBuilder *b = [[JavaLangStringBuilder alloc] initWithNSString:[((id<FFTKeyValueList>) nil_chk([list getWithInt:0])) getValue]];
  for (int index = 1; index < [list size]; index++) {
    (void) [b appendWithNSString:[NSString stringWithFormat:@"; %@", [((id<FFTKeyValueList>) nil_chk([list getWithInt:index])) getValue]]];
  }
  return [b description];
}

- (id<JavaUtilList>)getValuesWithNSString:(NSString *)key {
  if (![self containsWithNSString:key]) {
    return FFTKVLReader_get_emptyValueList_();
  }
  JavaUtilArrayList *values = [[JavaUtilArrayList alloc] init];
  for (id<FFTKeyValueList> __strong kvl in nil_chk([self getWithNSString:key])) {
    [values addWithId:[((id<FFTKeyValueList>) nil_chk(kvl)) getValue]];
  }
  return values;
}

- (NSString *)getValue {
  return value_;
}

- (NSString *)description {
  return value_;
}

- (void)removeWithNSString:(NSString *)key {
  (void) [((JavaUtilHashMap *) nil_chk(kvl_)) removeWithId:key];
}

- (void)copyAllFieldsTo:(FFTKVLReader_KeyValueListDefault *)other {
  [super copyAllFieldsTo:other];
  other->kvl_ = kvl_;
  other->value_ = value_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithNSString:", "KeyValueListDefault", NULL, 0x1, NULL },
    { "addWithNSString:withFFTKeyValueList:", "add", "V", 0x1, NULL },
    { "setToValueWithNSString:withFFTKeyValueList:", "setToValue", "V", 0x1, NULL },
    { "removeByValueWithNSString:withNSString:", "removeByValue", "V", 0x1, NULL },
    { "getWithNSString:", "get", "Ljava.util.List;", 0x1, NULL },
    { "getWithValueWithNSString:withNSString:", "getWithValue", "Lcom.sponberg.fluid.util.KeyValueList;", 0x1, NULL },
    { "containsWithNSString:", "contains", "Z", 0x1, NULL },
    { "keys", NULL, "Ljava.util.Set;", 0x1, NULL },
    { "getValueWithNSString:", "getValue", "Ljava.lang.String;", 0x1, NULL },
    { "getValuesWithNSString:", "getValues", "Ljava.util.List;", 0x1, NULL },
    { "getValue", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "removeWithNSString:", "remove", "V", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "value_", NULL, 0x12, "Ljava.lang.String;", NULL,  },
    { "kvl_", NULL, 0x12, "Ljava.util.HashMap;", NULL,  },
  };
  static J2ObjcClassInfo _FFTKVLReader_KeyValueListDefault = { "KeyValueListDefault", "com.sponberg.fluid.util", "KVLReader", 0x9, 13, methods, 2, fields, 0, NULL};
  return &_FFTKVLReader_KeyValueListDefault;
}

@end
