//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src-delomboked/com/sponberg/fluid/util/LRUCacheTree.java
//

#include "IOSObjectArray.h"
#include "com/sponberg/fluid/util/LRUCache.h"
#include "com/sponberg/fluid/util/LRUCacheTree.h"
#include "java/util/HashSet.h"

@implementation FFTLRUCacheTree

- (id)initWithInt:(int)maxEntries {
  if (self = [super init]) {
    dontCacheChainsStartingWith_ = [[JavaUtilHashSet alloc] init];
    cache_ = [[FFTLRUCache alloc] initWithInt:maxEntries];
    subCache_ = [[FFTLRUCache alloc] initWithInt:maxEntries];
    self->maxEntries_ = maxEntries;
  }
  return self;
}

- (void)dontCacheChainStartingWithWithNSString:(NSString *)key {
  [((JavaUtilHashSet *) nil_chk(dontCacheChainsStartingWith_)) addWithId:key];
}

- (id)getWithNSStringArray:(IOSObjectArray *)keyChain {
  return [self getHelperWithNSStringArray:keyChain withInt:0];
}

- (id)getHelperWithNSStringArray:(IOSObjectArray *)keyChain
                         withInt:(int)index {
  if (index == (int) [((IOSObjectArray *) nil_chk(keyChain)) count] - 1) {
    return [((FFTLRUCache *) nil_chk(cache_)) getWithId:IOSObjectArray_Get(keyChain, index)];
  }
  else {
    FFTLRUCacheTree *tree = [((FFTLRUCache *) nil_chk(subCache_)) getWithId:IOSObjectArray_Get(keyChain, index)];
    if (tree == nil) {
      return nil;
    }
    else {
      return [tree getHelperWithNSStringArray:keyChain withInt:index + 1];
    }
  }
}

- (void)putWithNSStringArray:(IOSObjectArray *)keyChain
                      withId:(id)value {
  if ([((JavaUtilHashSet *) nil_chk(dontCacheChainsStartingWith_)) containsWithId:IOSObjectArray_Get(nil_chk(keyChain), 0)]) {
    return;
  }
  [self putHelperWithNSStringArray:keyChain withInt:0 withId:value];
}

- (void)putHelperWithNSStringArray:(IOSObjectArray *)keyChain
                           withInt:(int)index
                            withId:(id)value {
  if (index == (int) [((IOSObjectArray *) nil_chk(keyChain)) count] - 1) {
    (void) [((FFTLRUCache *) nil_chk(cache_)) putWithId:IOSObjectArray_Get(keyChain, index) withId:value];
  }
  else {
    FFTLRUCacheTree *tree = [((FFTLRUCache *) nil_chk(subCache_)) getWithId:IOSObjectArray_Get(keyChain, index)];
    if (tree == nil) {
      tree = [[FFTLRUCacheTree alloc] initWithInt:maxEntries_];
      (void) [subCache_ putWithId:IOSObjectArray_Get(keyChain, index) withId:tree];
    }
    [((FFTLRUCacheTree *) nil_chk(tree)) putHelperWithNSStringArray:keyChain withInt:index + 1 withId:value];
  }
}

- (void)removeWithNSStringArray:(IOSObjectArray *)keyChain {
  [self removeHelperWithNSStringArray:keyChain withInt:0];
}

- (void)removeHelperWithNSStringArray:(IOSObjectArray *)keyChain
                              withInt:(int)index {
  if (index == (int) [((IOSObjectArray *) nil_chk(keyChain)) count] - 1) {
    (void) [((FFTLRUCache *) nil_chk(cache_)) removeWithId:IOSObjectArray_Get(keyChain, index)];
    (void) [((FFTLRUCache *) nil_chk(subCache_)) removeWithId:IOSObjectArray_Get(keyChain, index)];
  }
  else {
    FFTLRUCacheTree *tree = [((FFTLRUCache *) nil_chk(subCache_)) getWithId:IOSObjectArray_Get(keyChain, index)];
    if (tree == nil) {
      return;
    }
    else {
      [tree removeHelperWithNSStringArray:keyChain withInt:index + 1];
    }
  }
}

- (void)copyAllFieldsTo:(FFTLRUCacheTree *)other {
  [super copyAllFieldsTo:other];
  other->cache_ = cache_;
  other->dontCacheChainsStartingWith_ = dontCacheChainsStartingWith_;
  other->maxEntries_ = maxEntries_;
  other->subCache_ = subCache_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithInt:", "LRUCacheTree", NULL, 0x1, NULL },
    { "dontCacheChainStartingWithWithNSString:", "dontCacheChainStartingWith", "V", 0x1, NULL },
    { "getWithNSStringArray:", "get", "TV;", 0x1, NULL },
    { "getHelperWithNSStringArray:withInt:", "getHelper", "TV;", 0x4, NULL },
    { "putWithNSStringArray:withId:", "put", "V", 0x1, NULL },
    { "putHelperWithNSStringArray:withInt:withId:", "putHelper", "V", 0x4, NULL },
    { "removeWithNSStringArray:", "remove", "V", 0x1, NULL },
    { "removeHelperWithNSStringArray:withInt:", "removeHelper", "V", 0x4, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "maxEntries_", NULL, 0x12, "I", NULL,  },
    { "cache_", NULL, 0x0, "Lcom.sponberg.fluid.util.LRUCache;", NULL,  },
    { "subCache_", NULL, 0x0, "Lcom.sponberg.fluid.util.LRUCache;", NULL,  },
    { "dontCacheChainsStartingWith_", NULL, 0x0, "Ljava.util.HashSet;", NULL,  },
  };
  static J2ObjcClassInfo _FFTLRUCacheTree = { "LRUCacheTree", "com.sponberg.fluid.util", NULL, 0x1, 8, methods, 4, fields, 0, NULL};
  return &_FFTLRUCacheTree;
}

@end
