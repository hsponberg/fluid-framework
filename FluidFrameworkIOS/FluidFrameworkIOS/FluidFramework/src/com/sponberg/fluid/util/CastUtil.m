//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src-delomboked/com/sponberg/fluid/util/CastUtil.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/sponberg/fluid/util/CastUtil.h"
#include "java/lang/Boolean.h"
#include "java/lang/Byte.h"
#include "java/lang/Double.h"
#include "java/lang/Enum.h"
#include "java/lang/Exception.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/reflect/Constructor.h"
#include "java/util/HashMap.h"

BOOL FFTCastUtil_initialized = NO;

@implementation FFTCastUtil

JavaUtilHashMap * FFTCastUtil_primitiveDefaults_;

+ (BOOL)isArrayOfPrimitivesWithIOSClass:(IOSClass *)c {
  return !([((NSString *) nil_chk([((IOSClass *) nil_chk(c)) getName])) hasPrefix:@"[L"]);
}

+ (id)getNullOrPrimitiveDefaultWithIOSClass:(IOSClass *)to {
  return [((JavaUtilHashMap *) nil_chk(FFTCastUtil_primitiveDefaults_)) getWithId:to];
}

+ (id)castWithId:(id)o
    withIOSClass:(IOSClass *)to {
  if (o == nil) {
    return [FFTCastUtil getNullOrPrimitiveDefaultWithIOSClass:to];
  }
  if ([nil_chk(o) getClass] == to) {
    return o;
  }
  if ([to isAssignableFrom:[o getClass]]) {
    return o;
  }
  @try {
    NSString *s = [o description];
    if ([to isAssignableFrom:[IOSClass classWithClass:[JavaLangInteger class]]] || [to isAssignableFrom:[IOSClass intClass]]) {
      if (s != nil && [((NSString *) nil_chk([s trim])) isEqual:@""]) {
        o = [JavaLangInteger valueOfWithInt:0];
      }
      else {
        o = [JavaLangInteger valueOfWithInt:[JavaLangInteger parseIntWithNSString:s]];
      }
    }
    else if ([to isAssignableFrom:[IOSClass classWithClass:[JavaLangLong class]]] || [to isAssignableFrom:[IOSClass longClass]]) {
      if (s != nil && [((NSString *) nil_chk([s trim])) isEqual:@""]) {
        o = [JavaLangInteger valueOfWithInt:0];
      }
      else {
        o = [JavaLangLong valueOfWithLong:[JavaLangLong parseLongWithNSString:s]];
      }
    }
    else if ([to isAssignableFrom:[IOSClass classWithClass:[JavaLangDouble class]]] || [to isAssignableFrom:[IOSClass doubleClass]]) {
      o = [JavaLangDouble valueOfWithDouble:[JavaLangDouble parseDoubleWithNSString:s]];
    }
    else if ([to isAssignableFrom:[IOSClass classWithClass:[JavaLangByte class]]] || [to isAssignableFrom:[IOSClass byteClass]]) {
      o = [JavaLangByte valueOfWithByte:[JavaLangByte parseByteWithNSString:s]];
    }
    else if ([to isAssignableFrom:[IOSClass classWithClass:[JavaLangBoolean class]]] || [to isAssignableFrom:[IOSClass booleanClass]]) {
      o = [JavaLangBoolean valueOfWithBoolean:[JavaLangBoolean parseBooleanWithNSString:s]];
    }
    else if ([to getSuperclass] != nil && [to getSuperclass] == [IOSClass classWithClass:[JavaLangEnum class]]) {
      o = [JavaLangEnum valueOfWithIOSClass:(IOSClass *) check_class_cast(to, [IOSClass class]) withNSString:[((NSString *) nil_chk(s)) replaceAll:@" " withReplacement:@""]];
    }
    else {
      o = [((JavaLangReflectConstructor *) nil_chk([to getConstructor:[IOSObjectArray arrayWithObjects:(id[]){ [IOSClass classWithClass:[NSString class]] } count:1 type:[IOSClass classWithClass:[IOSClass class]]]])) newInstanceWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ o } count:1 type:[IOSClass classWithClass:[NSObject class]]]];
    }
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    @throw [[JavaLangRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"Can't cast %@ to %@", o, to]];
  }
  return o;
}

- (id)init {
  return [super init];
}

+ (void)initialize {
  if (self == [FFTCastUtil class]) {
    FFTCastUtil_primitiveDefaults_ = [[JavaUtilHashMap alloc] init];
    {
      (void) [FFTCastUtil_primitiveDefaults_ putWithId:[IOSClass intClass] withId:[JavaLangInteger valueOfWithInt:0]];
      (void) [FFTCastUtil_primitiveDefaults_ putWithId:[IOSClass byteClass] withId:[JavaLangInteger valueOfWithInt:0]];
      (void) [FFTCastUtil_primitiveDefaults_ putWithId:[IOSClass doubleClass] withId:[JavaLangInteger valueOfWithInt:0]];
      (void) [FFTCastUtil_primitiveDefaults_ putWithId:[IOSClass floatClass] withId:[JavaLangInteger valueOfWithInt:0]];
      (void) [FFTCastUtil_primitiveDefaults_ putWithId:[IOSClass longClass] withId:[JavaLangInteger valueOfWithInt:0]];
      (void) [FFTCastUtil_primitiveDefaults_ putWithId:[IOSClass booleanClass] withId:[JavaLangBoolean valueOfWithBoolean:NO]];
    }
    FFTCastUtil_initialized = YES;
  }
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "isArrayOfPrimitivesWithIOSClass:", "isArrayOfPrimitives", "Z", 0x9, NULL },
    { "getNullOrPrimitiveDefaultWithIOSClass:", "getNullOrPrimitiveDefault", "Ljava.lang.Object;", 0x9, NULL },
    { "castWithId:withIOSClass:", "cast", "Ljava.lang.Object;", 0x9, NULL },
    { "init", NULL, NULL, 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "primitiveDefaults_", NULL, 0x8, "Ljava.util.HashMap;", &FFTCastUtil_primitiveDefaults_,  },
  };
  static J2ObjcClassInfo _FFTCastUtil = { "CastUtil", "com.sponberg.fluid.util", NULL, 0x1, 4, methods, 1, fields, 0, NULL};
  return &_FFTCastUtil;
}

@end
