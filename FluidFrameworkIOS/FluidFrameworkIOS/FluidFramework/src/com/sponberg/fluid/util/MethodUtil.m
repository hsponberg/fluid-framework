//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src-delomboked/com/sponberg/fluid/util/MethodUtil.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/sponberg/fluid/util/MethodUtil.h"
#include "java/lang/Exception.h"
#include "java/lang/NoSuchMethodException.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/reflect/Method.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"

BOOL FFTMethodUtil_initialized = NO;

@implementation FFTMethodUtil

JavaUtilHashMap * FFTMethodUtil_classMethodMap_;
BOOL FFTMethodUtil_cache_ = NO;

+ (JavaUtilHashMap *)getMethodsWithIOSClass:(IOSClass *)c {
  JavaUtilHashMap *methodMap = [((JavaUtilHashMap *) nil_chk(FFTMethodUtil_classMethodMap_)) getWithId:c];
  if (methodMap == nil) {
    methodMap = [[JavaUtilHashMap alloc] init];
    (void) [FFTMethodUtil_classMethodMap_ putWithId:c withId:methodMap];
    IOSObjectArray *methods = [((IOSClass *) nil_chk(c)) getMethods];
    {
      IOSObjectArray *a__ = methods;
      JavaLangReflectMethod * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      JavaLangReflectMethod * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        JavaLangReflectMethod *method = (*b__++);
        (void) [methodMap putWithId:[[FFTMethodSignature alloc] initWithNSString:[((JavaLangReflectMethod *) nil_chk(method)) getName] withIOSClassArray:[method getParameterTypes]] withId:method];
      }
    }
  }
  return methodMap;
}

+ (id<JavaUtilCollection>)getAllMethodsWithIOSClass:(IOSClass *)c {
  if (!FFTMethodUtil_cache_) {
    return [JavaUtilArrays asListWithNSObjectArray:[((IOSClass *) nil_chk(c)) getMethods]];
  }
  JavaUtilHashMap *methodMap = [FFTMethodUtil getMethodsWithIOSClass:c];
  return [((JavaUtilHashMap *) nil_chk(methodMap)) values];
}

+ (JavaLangReflectMethod *)getMethodWithIOSClass:(IOSClass *)c
                                    withNSString:(NSString *)name
                               withIOSClassArray:(IOSObjectArray *)parameters {
  if (!FFTMethodUtil_cache_) {
    return [((IOSClass *) nil_chk(c)) getMethod:name parameterTypes:parameters];
  }
  if (parameters == nil) {
    parameters = [IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[IOSClass class]]];
  }
  JavaLangReflectMethod *method = [((JavaUtilHashMap *) nil_chk([FFTMethodUtil getMethodsWithIOSClass:c])) getWithId:[[FFTMethodSignature alloc] initWithNSString:name withIOSClassArray:parameters]];
  if (method == nil) {
    JavaLangStringBuffer *msg = [[JavaLangStringBuffer alloc] init];
    (void) [msg appendWithNSString:[NSString stringWithFormat:@"No such method %@(", name]];
    for (int index = 0; index < (int) [((IOSObjectArray *) nil_chk(parameters)) count]; index++) {
      (void) [msg appendWithNSString:[NSString stringWithFormat:@"%@%@", [((IOSClass *) IOSObjectArray_Get(parameters, index)) getSimpleName], ((index < (int) [parameters count] - 1) ? @", " : @"")]];
    }
    (void) [msg appendWithNSString:[NSString stringWithFormat:@") on class %@", [((IOSClass *) nil_chk(c)) getName]]];
    @throw [[JavaLangNoSuchMethodException alloc] initWithNSString:[msg description]];
  }
  else {
    return method;
  }
}

+ (JavaLangReflectMethod *)getGetterMethodWithIOSClass:(IOSClass *)rowObject
                                          withNSString:(NSString *)name {
  if ([((NSString *) nil_chk(name)) hasPrefix:@"is"] || [name hasPrefix:@"has"]) {
    @try {
      return [FFTMethodUtil getMethodWithIOSClass:rowObject withNSString:name withIOSClassArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[IOSClass class]]]];
    }
    @catch (JavaLangNoSuchMethodException *e) {
      name = [NSString stringWithFormat:@"%@%@", [((NSString *) nil_chk([name substring:0 endIndex:1])) uppercaseString], [name substring:1]];
      NSString *mName = [NSString stringWithFormat:@"is%@", name];
      return [FFTMethodUtil getMethodWithIOSClass:rowObject withNSString:mName withIOSClassArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[IOSClass class]]]];
    }
  }
  name = [NSString stringWithFormat:@"%@%@", [((NSString *) nil_chk([name substring:0 endIndex:1])) uppercaseString], [name substring:1]];
  @try {
    NSString *mName = [NSString stringWithFormat:@"get%@", name];
    return [FFTMethodUtil getMethodWithIOSClass:rowObject withNSString:mName withIOSClassArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[IOSClass class]]]];
  }
  @catch (JavaLangNoSuchMethodException *e) {
    NSString *mName = [NSString stringWithFormat:@"is%@", name];
    return [FFTMethodUtil getMethodWithIOSClass:rowObject withNSString:mName withIOSClassArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[IOSClass class]]]];
  }
}

+ (JavaLangReflectMethod *)getGetterMethodWithStringParameterWithIOSClass:(IOSClass *)rowObject
                                                             withNSString:(NSString *)name {
  name = [NSString stringWithFormat:@"%@%@", [((NSString *) nil_chk([((NSString *) nil_chk(name)) substring:0 endIndex:1])) uppercaseString], [name substring:1]];
  NSString *mName = [NSString stringWithFormat:@"get%@", name];
  IOSObjectArray *parameterTypes = [IOSObjectArray arrayWithObjects:(id[]){ [IOSClass classWithClass:[NSString class]] } count:1 type:[IOSClass classWithClass:[IOSClass class]]];
  return [FFTMethodUtil getMethodWithIOSClass:rowObject withNSString:mName withIOSClassArray:parameterTypes];
}

+ (JavaLangReflectMethod *)getSetterMethodWithIOSClass:(IOSClass *)object
                                          withNSString:(NSString *)name
                                          withIOSClass:(IOSClass *)type {
  name = [NSString stringWithFormat:@"%@%@", [((NSString *) nil_chk([((NSString *) nil_chk(name)) substring:0 endIndex:1])) uppercaseString], [name substring:1]];
  NSString *mName = [NSString stringWithFormat:@"set%@", name];
  return [FFTMethodUtil getMethodWithIOSClass:object withNSString:mName withIOSClassArray:[IOSObjectArray arrayWithObjects:(id[]){ type } count:1 type:[IOSClass classWithClass:[IOSClass class]]]];
}

- (id)init {
  return [super init];
}

+ (void)initialize {
  if (self == [FFTMethodUtil class]) {
    FFTMethodUtil_classMethodMap_ = [[JavaUtilHashMap alloc] init];
    FFTMethodUtil_initialized = YES;
  }
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "getMethodsWithIOSClass:", "getMethods", "Ljava.util.HashMap;", 0xa, NULL },
    { "getAllMethodsWithIOSClass:", "getAllMethods", "Ljava.util.Collection;", 0x9, NULL },
    { "getMethodWithIOSClass:withNSString:withIOSClassArray:", "getMethod", "Ljava.lang.reflect.Method;", 0x9, "Ljava.lang.NoSuchMethodException;" },
    { "getGetterMethodWithIOSClass:withNSString:", "getGetterMethod", "Ljava.lang.reflect.Method;", 0x9, "Ljava.lang.Exception;" },
    { "getGetterMethodWithStringParameterWithIOSClass:withNSString:", "getGetterMethodWithStringParameter", "Ljava.lang.reflect.Method;", 0x9, "Ljava.lang.Exception;" },
    { "getSetterMethodWithIOSClass:withNSString:withIOSClass:", "getSetterMethod", "Ljava.lang.reflect.Method;", 0x9, "Ljava.lang.Exception;" },
    { "init", NULL, NULL, 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "classMethodMap_", NULL, 0x8, "Ljava.util.HashMap;", &FFTMethodUtil_classMethodMap_,  },
    { "cache_", NULL, 0x8, "Z", &FFTMethodUtil_cache_,  },
  };
  static J2ObjcClassInfo _FFTMethodUtil = { "MethodUtil", "com.sponberg.fluid.util", NULL, 0x1, 7, methods, 2, fields, 0, NULL};
  return &_FFTMethodUtil;
}

@end

@implementation FFTMethodSignature

- (id)initWithNSString:(NSString *)name
     withIOSClassArray:(IOSObjectArray *)parameters {
  if (self = [super init]) {
    self->name_ = name;
    self->parameters_ = parameters;
    int hashcode = ((int) [((NSString *) nil_chk(name)) hash]);
    for (int index = 0; index < (int) [((IOSObjectArray *) nil_chk(parameters)) count]; index++) {
      hashcode ^= ((int) [((IOSClass *) IOSObjectArray_Get(parameters, index)) hash]);
    }
    self->hashcode_ = hashcode;
  }
  return self;
}

- (NSString *)getName {
  return name_;
}

- (IOSObjectArray *)getParameters {
  return parameters_;
}

- (NSUInteger)hash {
  return hashcode_;
}

- (BOOL)isEqual:(id)obj {
  FFTMethodSignature *castOther = (FFTMethodSignature *) check_class_cast(obj, [FFTMethodSignature class]);
  if ((int) [((IOSObjectArray *) nil_chk(((FFTMethodSignature *) nil_chk(castOther))->parameters_)) count] != (int) [parameters_ count]) {
    return NO;
  }
  if (![((NSString *) nil_chk(self->name_)) isEqual:castOther->name_]) {
    return NO;
  }
  for (int index = 0; index < (int) [parameters_ count]; index++) {
    if (![((IOSClass *) IOSObjectArray_Get(parameters_, index)) isEqual:IOSObjectArray_Get(castOther->parameters_, index)]) {
      return NO;
    }
  }
  return YES;
}

- (void)copyAllFieldsTo:(FFTMethodSignature *)other {
  [super copyAllFieldsTo:other];
  other->hashcode_ = hashcode_;
  other->name_ = name_;
  other->parameters_ = parameters_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withIOSClassArray:", "MethodSignature", NULL, 0x1, NULL },
    { "getName", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "getParameters", NULL, "[Ljava.lang.Object;", 0x1, NULL },
    { "hash", "hashCode", "I", 0x1, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "name_", NULL, 0x10, "Ljava.lang.String;", NULL,  },
    { "parameters_", NULL, 0x10, "[Ljava.lang.Class;", NULL,  },
    { "hashcode_", NULL, 0x10, "I", NULL,  },
  };
  static J2ObjcClassInfo _FFTMethodSignature = { "MethodSignature", "com.sponberg.fluid.util", NULL, 0x0, 5, methods, 3, fields, 0, NULL};
  return &_FFTMethodSignature;
}

@end
