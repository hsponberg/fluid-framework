//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src-delomboked/com/sponberg/fluid/parser/ViewsParser.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/sponberg/fluid/FluidApp.h"
#include "com/sponberg/fluid/GlobalState.h"
#include "com/sponberg/fluid/ResourceService.h"
#include "com/sponberg/fluid/layout/Color.h"
#include "com/sponberg/fluid/layout/Constraints.h"
#include "com/sponberg/fluid/layout/Coord.h"
#include "com/sponberg/fluid/layout/CoordFixed.h"
#include "com/sponberg/fluid/layout/CoordRelativeToParent.h"
#include "com/sponberg/fluid/layout/CoordRelativeToView.h"
#include "com/sponberg/fluid/layout/Layout.h"
#include "com/sponberg/fluid/layout/Length.h"
#include "com/sponberg/fluid/layout/LengthCompute.h"
#include "com/sponberg/fluid/layout/LengthEquals.h"
#include "com/sponberg/fluid/layout/LengthFill.h"
#include "com/sponberg/fluid/layout/LengthFixed.h"
#include "com/sponberg/fluid/layout/LengthRelativeToLayer.h"
#include "com/sponberg/fluid/layout/LengthRelativeToParent.h"
#include "com/sponberg/fluid/layout/LengthRelativeToRow.h"
#include "com/sponberg/fluid/layout/LengthRelativeToView.h"
#include "com/sponberg/fluid/layout/Screen.h"
#include "com/sponberg/fluid/layout/Subtractor.h"
#include "com/sponberg/fluid/layout/TableLayout.h"
#include "com/sponberg/fluid/layout/View.h"
#include "com/sponberg/fluid/layout/ViewBehavior.h"
#include "com/sponberg/fluid/layout/ViewManager.h"
#include "com/sponberg/fluid/parser/ViewBehaviorFactory.h"
#include "com/sponberg/fluid/parser/ViewsParser.h"
#include "com/sponberg/fluid/util/KVLReader.h"
#include "com/sponberg/fluid/util/KeyValueList.h"
#include "com/sponberg/fluid/util/KeyValueListModifyable.h"
#include "com/sponberg/fluid/util/Logger.h"
#include "java/io/IOException.h"
#include "java/lang/Boolean.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Set.h"

@implementation FFTViewsParser

- (void)initialize__WithFFTFluidApp:(FFTFluidApp *)app {
  self->app_ = app;
  NSString *s = [((id<FFTResourceService>) nil_chk([((FFTFluidApp *) nil_chk(app)) getResourceService])) getResourceAsStringWithNSString:@"generated" withNSString:@"views.txt"];
  if (s == nil) {
    @throw [[JavaLangRuntimeException alloc] initWithNSString:@"Unable to find views.txt"];
  }
  @try {
    settings_ = [[FFTKVLReader alloc] initWithNSString:s];
  }
  @catch (JavaIoIOException *e) {
    @throw [[JavaLangRuntimeException alloc] initWithJavaLangThrowable:e];
  }
  for (NSString * __strong tableLayout in nil_chk([((FFTKVLReader *) nil_chk(settings_)) getValuesWithNSString:@"table-layouts"])) {
    if ([((NSString *) nil_chk(tableLayout)) contains:@"@"]) {
      continue;
    }
    currentFile_ = tableLayout;
    NSString *data = [self getPlatformOrDefaultResourceWithNSString:@"views/table-layouts" withNSString:tableLayout];
    if (data == nil) {
      @throw [[JavaLangRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"TableLayout not found %@", tableLayout]];
    }
    int i = [tableLayout indexOfString:@"."];
    NSString *id_ = [tableLayout substring:0 endIndex:i];
    FFTTableLayout *layout = [self parseTableLayoutWithNSString:id_ withNSString:data withDouble:[((FFTViewManager *) nil_chk([app getViewManager])) getBaseUnit]];
    [((FFTViewManager *) nil_chk([app getViewManager])) addTableLayoutWithFFTTableLayout:layout];
  }
  for (NSString * __strong screen in nil_chk([settings_ getValuesWithNSString:@"screens"])) {
    if ([((NSString *) nil_chk(screen)) contains:@"@"]) {
      continue;
    }
    currentFile_ = screen;
    NSString *data = [self getPlatformOrDefaultResourceWithNSString:@"views/screens" withNSString:screen];
    if (data == nil) {
      @throw [[JavaLangRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"Screen not found %@", screen]];
    }
    id<FFTKeyValueList> kvl = [self getScreenKVLWithNSString:data];
    int i = [screen indexOfString:@"."];
    NSString *id_ = [screen substring:0 endIndex:i];
    FFTLayout *layout = [self parseLayoutWithNSString:id_ withFFTKeyValueList:kvl withDouble:[((FFTViewManager *) nil_chk([app getViewManager])) getBaseUnit]];
    [((FFTViewManager *) nil_chk([app getViewManager])) addScreenWithFFTLayout:layout];
    BOOL showTabs = YES;
    if ([((FFTKVLReader *) nil_chk([app getSettings])) containsWithNSString:@"show-tabs"]) {
      showTabs = [JavaLangBoolean parseBooleanWithNSString:[((FFTKVLReader *) nil_chk([app getSettings])) getValueWithNSString:@"show-tabs"]];
    }
    if ([((id<FFTKeyValueList>) nil_chk(kvl)) containsWithNSString:@"show-tabs"]) {
      showTabs = [((NSString *) nil_chk([kvl getValueWithNSString:@"show-tabs"])) equalsIgnoreCase:@"true"];
    }
    [((FFTScreen *) nil_chk([((FFTViewManager *) nil_chk([app getViewManager])) getScreenWithNSString:[((FFTLayout *) nil_chk(layout)) getId]])) setShowTabBarWithBoolean:showTabs];
    BOOL showNavigation = YES;
    if ([kvl containsWithNSString:@"show-navigation"]) {
      showNavigation = [((NSString *) nil_chk([kvl getValueWithNSString:@"show-navigation"])) equalsIgnoreCase:@"true"];
    }
    [((FFTScreen *) nil_chk([((FFTViewManager *) nil_chk([app getViewManager])) getScreenWithNSString:[layout getId]])) setShowNavigationBarWithBoolean:showNavigation];
    BOOL showStatusBar = YES;
    if ([kvl containsWithNSString:@"show-status-bar"]) {
      showStatusBar = [((NSString *) nil_chk([kvl getValueWithNSString:@"show-status-bar"])) equalsIgnoreCase:@"true"];
    }
    [((FFTScreen *) nil_chk([((FFTViewManager *) nil_chk([app getViewManager])) getScreenWithNSString:[layout getId]])) setShowStatusBarWithBoolean:showStatusBar];
    NSString *backButtonText = nil;
    if ([kvl containsWithNSString:@"back-button-text"]) {
      backButtonText = [kvl getValueWithNSString:@"back-button-text"];
    }
    [((FFTScreen *) nil_chk([((FFTViewManager *) nil_chk([app getViewManager])) getScreenWithNSString:[layout getId]])) setBackButtonTextWithNSString:backButtonText];
    BOOL hideBackButton = NO;
    if ([kvl containsWithNSString:@"hide-back-button"]) {
      hideBackButton = [((NSString *) nil_chk([kvl getValueWithNSString:@"hide-back-button"])) equalsIgnoreCase:@"true"];
    }
    [((FFTScreen *) nil_chk([((FFTViewManager *) nil_chk([app getViewManager])) getScreenWithNSString:[layout getId]])) setHideBackButtonWithBoolean:hideBackButton];
  }
  for (NSString * __strong component in nil_chk([settings_ getValuesWithNSString:@"components"])) {
    if ([((NSString *) nil_chk(component)) contains:@"@"]) {
      continue;
    }
    currentFile_ = component;
    NSString *data = [self getPlatformOrDefaultResourceWithNSString:@"views/components" withNSString:component];
    if (data == nil) {
      @throw [[JavaLangRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"Component not found %@", component]];
    }
    int i = [component indexOfString:@"."];
    NSString *id_ = [component substring:0 endIndex:i];
    FFTLayout *layout = [self parseLayoutWithNSString:id_ withFFTKeyValueList:[self getScreenKVLWithNSString:data] withDouble:[((FFTViewManager *) nil_chk([app getViewManager])) getBaseUnit]];
    [((FFTViewManager *) nil_chk([app getViewManager])) addLayoutWithFFTLayout:layout];
  }
  viewObjectById_ = nil;
}

- (NSString *)getPlatformOrDefaultResourceWithNSString:(NSString *)dir
                                          withNSString:(NSString *)defaultName {
  int i = [((NSString *) nil_chk(defaultName)) indexOfString:@"."];
  NSString *platformSpecific = [NSString stringWithFormat:@"%@@%@%@", [defaultName substring:0 endIndex:i], [((FFTFluidApp *) nil_chk(app_)) getPlatform], [defaultName substring:i]];
  NSString *data = [((id<FFTResourceService>) nil_chk([app_ getResourceService])) getResourceAsStringWithNSString:dir withNSString:platformSpecific];
  if (data == nil) {
    data = [((id<FFTResourceService>) nil_chk([app_ getResourceService])) getResourceAsStringWithNSString:dir withNSString:defaultName];
  }
  return data;
}

- (id<FFTKeyValueList>)getScreenKVLWithNSString:(NSString *)screenAsString {
  @try {
    return [[FFTKVLReader alloc] initWithNSString:screenAsString];
  }
  @catch (JavaIoIOException *e) {
    [FFTLogger errorWithId:self withJavaLangThrowable:e];
    [FFTLogger errorWithId:self withNSString:[NSString stringWithFormat:@"Caught error %@, for %@ line %@", [((JavaIoIOException *) nil_chk(e)) getMessage], currentFile_, lastLine_] withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]];
    @throw [[JavaLangRuntimeException alloc] initWithJavaLangThrowable:e];
  }
}

- (FFTLayout *)parseLayoutWithNSString:(NSString *)id_
                   withFFTKeyValueList:(id<FFTKeyValueList>)screen
                            withDouble:(double)baseUnit {
  return [self parseLayoutWithNSString:@"" withNSString:id_ withFFTKeyValueList:screen withDouble:baseUnit];
}

- (FFTLayout *)parseLayoutWithNSString:(NSString *)layoutIdPrefix
                          withNSString:(NSString *)id_
                   withFFTKeyValueList:(id<FFTKeyValueList>)reader
                            withDouble:(double)baseUnit {
  screen_ = reader;
  viewObjectById_ = [[JavaUtilHashMap alloc] init];
  @try {
    [self setupViewById];
    NSString *nameKey = nil;
    if ([((id<FFTKeyValueList>) nil_chk(screen_)) containsWithNSString:@"name-key"]) {
      nameKey = [screen_ getValueWithNSString:@"name-key"];
    }
    currentLayout_ = [[FFTLayout alloc] initWithNSString:[NSString stringWithFormat:@"%@%@", layoutIdPrefix, id_] withNSString:[screen_ getValueWithNSString:@"name"] withNSString:nameKey withDouble:baseUnit];
    if ([screen_ containsWithNSString:@"subtitle"]) {
      [currentLayout_ setSubtitleWithNSString:[screen_ getValueWithNSString:@"subtitle"]];
    }
    if ([screen_ containsWithNSString:@"subtitle-key"]) {
      [currentLayout_ setSubtitleKeyWithNSString:[screen_ getValueWithNSString:@"subtitle-key"]];
    }
    [currentLayout_ setPropertiesWithJavaUtilList:[screen_ getWithNSString:@"properties"]];
    id<JavaUtilList> layoutVariables = [screen_ getWithNSString:@"layout-variables"];
    if (layoutVariables == nil) {
      layoutVariables = [[JavaUtilArrayList alloc] init];
    }
    if ([screen_ containsWithNSString:@"background-color"]) {
      [currentLayout_ setBackgroundColorWithFFTColor:[((FFTViewManager *) nil_chk([((FFTFluidApp *) nil_chk(app_)) getViewManager])) getColorWithNSString:[screen_ getValueWithNSString:@"background-color"]]];
    }
    if ([screen_ containsWithNSString:@"precompute-positions"]) {
      [currentLayout_ setPrecomputedPositionsWithBoolean:[((NSString *) nil_chk([screen_ getValueWithNSString:@"precompute-positions"])) equalsIgnoreCase:@"true"]];
    }
    if ([screen_ containsWithNSString:@"wrap-in-scroll-view"]) {
      [currentLayout_ setWrapInScrollViewWithBoolean:[((NSString *) nil_chk([screen_ getValueWithNSString:@"wrap-in-scroll-view"])) equalsIgnoreCase:@"true"]];
    }
    if ([screen_ containsWithNSString:@"block-focus-view-on-load"]) {
      [currentLayout_ setBlockFocusViewOnLoadWithBoolean:[((NSString *) nil_chk([screen_ getValueWithNSString:@"block-focus-view-on-load"])) equalsIgnoreCase:@"true"]];
    }
    nextHorDir_ = FFTLayout_DirectionEnum_get_RIGHT();
    nextAlignment_ = FFTLayout_AlignEnum_get_TOP();
    id<JavaUtilList> lines = [screen_ getValuesWithNSString:@"layout"];
    parsingLandscape_ = NO;
    [self parseLayoutWithJavaUtilList:lines withJavaUtilList:layoutVariables];
    if ([screen_ containsWithNSString:@"layout-landscape"]) {
      lines = [screen_ getValuesWithNSString:@"layout-landscape"];
      [currentLayout_ createOrientationLandscape];
      [currentLayout_ setOrientationLandscapeWithBoolean:YES];
      parsingLandscape_ = YES;
      [self parseLayoutWithJavaUtilList:lines withJavaUtilList:layoutVariables];
    }
    [currentLayout_ setOrientationLandscapeWithBoolean:NO];
    return currentLayout_;
  }
  @catch (JavaLangException *e) {
    [FFTLogger errorWithId:self withJavaLangThrowable:e];
    [FFTLogger errorWithId:self withNSString:[NSString stringWithFormat:@"Caught error %@, for %@ line %@", [((JavaLangException *) nil_chk(e)) getMessage], currentFile_, lastLine_] withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]];
    @throw [[JavaLangRuntimeException alloc] initWithJavaLangThrowable:e];
  }
}

- (void)parseLayoutWithJavaUtilList:(id<JavaUtilList>)lines
                   withJavaUtilList:(id<JavaUtilList>)layoutVariables {
  anchorSet_ = NO;
  for (int index = 0; index < [((id<JavaUtilList>) nil_chk(lines)) size]; index += 2) {
    lastLine_ = [lines getWithInt:index];
    IOSObjectArray *lineParts = [((NSString *) nil_chk(lastLine_)) split:@"\\|"];
    JavaUtilHashMap *rowProperties = [[JavaUtilHashMap alloc] init];
    if ((int) [((IOSObjectArray *) nil_chk(lineParts)) count] > 1) {
      (void) [self parseRowPropertiesWithNSString:IOSObjectArray_Get(lineParts, 1) withJavaUtilHashMap:rowProperties];
    }
    [self parseRowWithNSString:IOSObjectArray_Get(lineParts, 0) withJavaUtilHashMap:rowProperties withJavaUtilList:layoutVariables];
    if (index + 1 >= [lines size]) {
      break;
    }
    lastLine_ = [lines getWithInt:index + 1];
    if ([((NSString *) nil_chk(lastLine_)) hasPrefix:@"*"]) {
      lineParts = [lastLine_ split:@"\\|"];
      rowProperties = [[JavaUtilHashMap alloc] init];
      if ((int) [((IOSObjectArray *) nil_chk(lineParts)) count] > 1) {
        (void) [self parseRowPropertiesWithNSString:IOSObjectArray_Get(lineParts, 1) withJavaUtilHashMap:rowProperties];
      }
      [self parseNewLayerWithJavaUtilHashMap:rowProperties];
      continue;
    }
    [self parseDownWithNSString:lastLine_];
  }
  [self fixRelativeLengthsWithDouble:[((FFTViewManager *) nil_chk([((FFTFluidApp *) nil_chk(app_)) getViewManager])) getBaseUnit]];
}

- (JavaUtilHashMap *)parseRowPropertiesWithNSString:(NSString *)lineProperties
                                withJavaUtilHashMap:(JavaUtilHashMap *)properties {
  IOSObjectArray *propertyPairs = [((NSString *) nil_chk(lineProperties)) split:@";"];
  {
    IOSObjectArray *a__ = propertyPairs;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *propertyPair = (*b__++);
      IOSObjectArray *pair = [((NSString *) nil_chk(propertyPair)) split:@":"];
      (void) [((JavaUtilHashMap *) nil_chk(properties)) putWithId:[((NSString *) IOSObjectArray_Get(nil_chk(pair), 0)) trim] withId:[((NSString *) IOSObjectArray_Get(pair, 1)) trim]];
    }
  }
  return properties;
}

- (void)fixRelativeLengthsWithDouble:(double)baseUnit {
  for (FFTView * __strong view in nil_chk([((FFTLayout *) nil_chk(currentLayout_)) getAllViews])) {
    {
      FFTLength *width = [((FFTConstraints *) nil_chk([((FFTView *) nil_chk(view)) getGivenConstraints])) getWidth];
      if ([((FFTLength *) nil_chk(width)) relativeToView]) {
        NSString *relativeId = [width getRelativeId];
        if (relativeId != nil) {
          FFTView *relativeView = [((JavaUtilHashMap *) nil_chk([currentLayout_ getViewMap])) getWithId:relativeId];
          if (relativeView == nil) {
            @throw [[JavaLangRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"Relative view is null %@ referenced from %@", relativeId, [view getId]]];
          }
          FFTLength *relativeWidthLength = [((FFTConstraints *) nil_chk([((FFTView *) nil_chk(relativeView)) getGivenConstraints])) getWidth];
          if (![((FFTLength *) nil_chk(relativeWidthLength)) isDynamic]) {
            JavaLangDouble *relativeWidth = [relativeWidthLength getFixedLength];
            for (FFTSubtractor * __strong relativeWidthLength2 in nil_chk([relativeWidthLength getSubtractors])) {
              if ([((FFTSubtractor *) nil_chk(relativeWidthLength2)) isRelativeToView]) {
                goto continue_nextViewWidth;
              }
              relativeWidth = [JavaLangDouble valueOfWithDouble:[((JavaLangDouble *) nil_chk(relativeWidth)) doubleValue] - [relativeWidthLength2 getFixed]];
            }
            for (FFTSubtractor * __strong relativeWidthLength2 in nil_chk([width getSubtractors])) {
              if ([((FFTSubtractor *) nil_chk(relativeWidthLength2)) isRelativeToView]) {
                goto continue_nextViewWidth;
              }
              else {
                relativeWidth = [JavaLangDouble valueOfWithDouble:[((JavaLangDouble *) nil_chk(relativeWidth)) doubleValue] - [relativeWidthLength2 getFixed]];
              }
            }
            [((FFTConstraints *) nil_chk([view getGivenConstraints])) setWidthWithFFTLength:[[FFTLengthFixed alloc] initWithDouble:[((JavaLangDouble *) nil_chk(relativeWidth)) doubleValue]]];
          }
        }
      }
    }
    continue_nextViewWidth: ;
  }
  for (FFTView * __strong view in nil_chk([currentLayout_ getAllViews])) {
    {
      FFTLength *height = [((FFTConstraints *) nil_chk([((FFTView *) nil_chk(view)) getGivenConstraints])) getHeight];
      if ([((FFTLength *) nil_chk(height)) relativeToView]) {
        NSString *relativeId = [height getRelativeId];
        if (relativeId != nil) {
          FFTView *relativeView = [((JavaUtilHashMap *) nil_chk([currentLayout_ getViewMap])) getWithId:relativeId];
          FFTLength *relativeHeightLength = [((FFTConstraints *) nil_chk([((FFTView *) nil_chk(relativeView)) getGivenConstraints])) getHeight];
          if (![((FFTLength *) nil_chk(relativeHeightLength)) isDynamic]) {
            JavaLangDouble *relativeHeight = [relativeHeightLength getFixedLength];
            for (FFTSubtractor * __strong relativeHeightLength2 in nil_chk([relativeHeightLength getSubtractors])) {
              if ([((FFTSubtractor *) nil_chk(relativeHeightLength2)) isRelativeToView]) {
                goto continue_nextViewHeight;
              }
              relativeHeight = [JavaLangDouble valueOfWithDouble:[((JavaLangDouble *) nil_chk(relativeHeight)) doubleValue] - [relativeHeightLength2 getFixed]];
            }
            for (FFTSubtractor * __strong relativeHeightLength2 in nil_chk([height getSubtractors])) {
              if ([((FFTSubtractor *) nil_chk(relativeHeightLength2)) isRelativeToView]) {
                goto continue_nextViewHeight;
              }
              else {
                relativeHeight = [JavaLangDouble valueOfWithDouble:[((JavaLangDouble *) nil_chk(relativeHeight)) doubleValue] - [relativeHeightLength2 getFixed]];
              }
            }
            [((FFTConstraints *) nil_chk([view getGivenConstraints])) setHeightWithFFTLength:[[FFTLengthFixed alloc] initWithDouble:[((JavaLangDouble *) nil_chk(relativeHeight)) doubleValue]]];
          }
        }
      }
    }
    continue_nextViewHeight: ;
  }
}

- (void)setupViewById {
  viewById_ = [[JavaUtilHashMap alloc] init];
  for (id<FFTKeyValueList> __strong list in nil_chk([((id<FFTKeyValueList>) nil_chk(screen_)) getWithNSString:@"views"])) {
    (void) [viewById_ putWithId:[((id<FFTKeyValueList>) nil_chk(list)) getValue] withId:list];
  }
}

- (void)parseRowWithNSString:(NSString *)s
         withJavaUtilHashMap:(JavaUtilHashMap *)rowProperties
            withJavaUtilList:(id<JavaUtilList>)layoutVariables {
  s = [((NSString *) nil_chk([((NSString *) nil_chk(s)) trim])) replaceAll:@" +" withReplacement:@" "];
  IOSObjectArray *sa = [((NSString *) nil_chk(s)) split:@" "];
  NSString *dir = IOSObjectArray_Get(nil_chk(sa), 0);
  if ([((NSString *) nil_chk(dir)) isEqual:@"->"]) {
    nextHorDir_ = FFTLayout_DirectionEnum_get_RIGHT();
  }
  else if ([dir isEqual:@"<-"]) {
    nextHorDir_ = FFTLayout_DirectionEnum_get_LEFT();
  }
  else {
    @throw [[JavaLangRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"Invalid format for moving direction, line %@", s]];
  }
  int start, end, inc;
  if (nextHorDir_ == FFTLayout_DirectionEnum_get_LEFT()) {
    start = (int) [sa count] - 1;
    end = 0;
    inc = -1;
  }
  else {
    start = 1;
    end = (int) [sa count];
    inc = 1;
  }
  for (int index = start; index != end; index += inc) {
    NSString *token = IOSObjectArray_Get(sa, index);
    BOOL isView = !([((NSString *) nil_chk(token)) contains:@"("] || [token contains:@")"]);
    if (isView) {
      FFTView *view = [self createViewWithNSString:token withJavaUtilHashMap:rowProperties withJavaUtilList:layoutVariables];
      if (index == start) {
        if (!anchorSet_) {
          [((FFTLayout *) nil_chk(currentLayout_)) setAnchorWithFFTView:view withFFTLayout_DirectionEnum:nextHorDir_];
          anchorSet_ = YES;
        }
        else {
          FFTLayout_AlignEnum *align = FFTLayout_AlignEnum_get_LEFT();
          if (nextAlignment_ == FFTLayout_AlignEnum_get_CENTER()) {
            align = FFTLayout_AlignEnum_get_CENTER();
          }
          else if (nextAlignment_ == FFTLayout_AlignEnum_get_RIGHT()) {
            align = FFTLayout_AlignEnum_get_RIGHT();
          }
          else if (nextAlignment_ == FFTLayout_AlignEnum_get_UNASSIGNED()) {
            align = (nextHorDir_ == FFTLayout_DirectionEnum_get_RIGHT()) ? FFTLayout_AlignEnum_get_LEFT() : FFTLayout_AlignEnum_get_RIGHT();
          }
          [((FFTLayout *) nil_chk(currentLayout_)) addDownWithFFTView:view withFFTLayout_AlignEnum:align withFFTLayout_DirectionEnum:nextHorDir_];
        }
      }
      else if (nextHorDir_ == FFTLayout_DirectionEnum_get_LEFT()) {
        FFTLayout_AlignEnum *align = (nextAlignment_ == FFTLayout_AlignEnum_get_TOP()) ? FFTLayout_AlignEnum_get_TOP() : FFTLayout_AlignEnum_get_BOTTOM();
        [((FFTLayout *) nil_chk(currentLayout_)) addLeftWithFFTView:view withFFTLayout_AlignEnum:align];
      }
      else if (nextHorDir_ == FFTLayout_DirectionEnum_get_RIGHT()) {
        FFTLayout_AlignEnum *align = (nextAlignment_ == FFTLayout_AlignEnum_get_TOP()) ? FFTLayout_AlignEnum_get_TOP() : FFTLayout_AlignEnum_get_BOTTOM();
        [((FFTLayout *) nil_chk(currentLayout_)) addRightWithFFTView:view withFFTLayout_AlignEnum:align];
      }
      nextAlignment_ = FFTLayout_AlignEnum_get_TOP();
    }
    else {
      if ([token contains:@"top"]) {
        nextAlignment_ = FFTLayout_AlignEnum_get_TOP();
      }
      else if ([token contains:@"bottom"]) {
        nextAlignment_ = FFTLayout_AlignEnum_get_BOTTOM();
      }
      else {
        [FFTLogger warnWithId:self withNSString:[NSString stringWithFormat:@"Attempted to set vertical alignment to unsupported value %@", token] withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]];
      }
    }
  }
}

- (void)parseDownWithNSString:(NSString *)s {
  s = [((NSString *) nil_chk(s)) trim];
  if (![((NSString *) nil_chk(s)) contains:@"|"]) {
    @throw [[JavaLangRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"Invalid Format for down line, line %@", s]];
  }
  if (nextHorDir_ == FFTLayout_DirectionEnum_get_RIGHT()) {
    nextHorDir_ = FFTLayout_DirectionEnum_get_LEFT();
  }
  else {
    nextHorDir_ = FFTLayout_DirectionEnum_get_RIGHT();
  }
  if ([s contains:@"right"]) {
    nextAlignment_ = FFTLayout_AlignEnum_get_RIGHT();
  }
  else if ([s contains:@"center"]) {
    nextAlignment_ = FFTLayout_AlignEnum_get_CENTER();
  }
  else if ([s contains:@"left"]) {
    nextAlignment_ = FFTLayout_AlignEnum_get_LEFT();
  }
  else {
    nextAlignment_ = FFTLayout_AlignEnum_get_UNASSIGNED();
  }
}

- (void)parseNewLayerWithJavaUtilHashMap:(JavaUtilHashMap *)rowProperties {
  nextHorDir_ = FFTLayout_DirectionEnum_get_RIGHT();
  nextAlignment_ = FFTLayout_AlignEnum_get_TOP();
  anchorSet_ = NO;
  NSString *visibleCondition = [((JavaUtilHashMap *) nil_chk(rowProperties)) getWithId:@"visible-condition"];
  if ([rowProperties containsKeyWithId:@"z-index"]) {
    [((FFTLayout *) nil_chk(currentLayout_)) addNewLayerWithNSString:visibleCondition withInt:[JavaLangInteger parseIntWithNSString:[rowProperties getWithId:@"z-index"]]];
  }
  else {
    [((FFTLayout *) nil_chk(currentLayout_)) addNewLayerWithNSString:visibleCondition];
  }
}

- (FFTView *)createViewWithNSString:(NSString *)id_
                withJavaUtilHashMap:(JavaUtilHashMap *)rowProperties
                   withJavaUtilList:(id<JavaUtilList>)layoutVariables {
  if ([((JavaUtilHashMap *) nil_chk(viewObjectById_)) containsKeyWithId:id_]) {
    FFTView *view = [viewObjectById_ getWithId:id_];
    if (parsingLandscape_) {
      [view setCurrentLayoutWithFFTView_OrientationProperties:[((FFTView *) nil_chk(view)) getLandscape]];
    }
    else {
      [view setCurrentLayoutWithFFTView_OrientationProperties:[((FFTView *) nil_chk(view)) getPortrait]];
    }
    return view;
  }
  if ([((JavaUtilHashMap *) nil_chk(viewById_)) getWithId:id_] == nil) {
    @throw [[JavaLangRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"View not found %@", id_]];
  }
  FFTViewsParser_KeyValueListWithRowProperties *list = [[FFTViewsParser_KeyValueListWithRowProperties alloc] initWithFFTKeyValueList:[viewById_ getWithId:id_] withJavaUtilHashMap:rowProperties withJavaUtilList:layoutVariables];
  FFTConstraints *c = [[FFTConstraints alloc] init];
  [c setWidthWithFFTLength:[self getLengthWithNSString:[list getSizeValueWithNSString:@"w"]]];
  [c setHeightWithFFTLength:[self getLengthWithNSString:[list getSizeValueWithNSString:@"h"]]];
  if (!anchorSet_) {
    if ([list containsWithNSString:@"x"]) {
      [c setXWithFFTCoord:[self getCoordWithNSString:[list getValueWithNSString:@"x"]]];
    }
    if ([list containsWithNSString:@"x2"]) {
      [c setX2WithFFTCoord:[self getCoordWithNSString:[list getValueWithNSString:@"x2"]]];
    }
    if ([list containsWithNSString:@"y"]) {
      [c setYWithFFTCoord:[self getCoordWithNSString:[list getValueWithNSString:@"y"]]];
    }
    if ([list containsWithNSString:@"y2"]) {
      [c setY2WithFFTCoord:[self getCoordWithNSString:[list getValueWithNSString:@"y2"]]];
    }
  }
  if (!anchorSet_ && [c getX] == nil && [c getX2] == nil) {
    if (nextHorDir_ == FFTLayout_DirectionEnum_get_RIGHT()) {
      [c setXWithFFTCoord:[[FFTCoordFixed alloc] initWithDouble:0.0]];
    }
    else {
      [c setX2WithFFTCoord:[[FFTCoordRelativeToParent alloc] initWithNSString:@"right" withJavaUtilArrayList:nil]];
    }
  }
  if (!anchorSet_ && [c getY] == nil && [c getY2] == nil) {
    [c setYWithFFTCoord:[[FFTCoordFixed alloc] initWithDouble:0.0]];
  }
  NSString *type = [list getValueWithNSString:@"type"];
  FFTViewBehavior *viewBehavior = [((FFTViewBehaviorFactory *) nil_chk([((FFTFluidApp *) nil_chk(app_)) getViewBehaviorFactory])) getViewBehaviorWithNSString:type withFFTKeyValueList:list];
  if (viewBehavior == nil) {
    @throw [[JavaLangRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"Unable to determine view behavior for type: %@, for line: %@", type, lastLine_]];
  }
  [((FFTViewBehavior *) nil_chk(viewBehavior)) validateConstraintsWithFFTConstraints:c];
  NSString *key = [list containsWithNSString:@"key"] ? [list getValueWithNSString:@"key"] : nil;
  NSString *visibleCondition = [list containsWithNSString:@"visible-condition"] ? [list getValueWithNSString:@"visible-condition"] : nil;
  FFTView *view = [[FFTView alloc] initWithNSString:id_ withNSString:key withNSString:visibleCondition withFFTLayout:currentLayout_ withFFTConstraints:c withFFTViewBehavior:viewBehavior];
  (void) [viewObjectById_ putWithId:id_ withId:view];
  return view;
}

- (FFTLength *)getLengthWithNSString:(NSString *)value {
  IOSObjectArray *sa = [((NSString *) nil_chk([((NSString *) nil_chk(value)) trim])) split:@" "];
  if ((int) [((IOSObjectArray *) nil_chk(sa)) count] == 1) {
    if ([((NSString *) IOSObjectArray_Get(sa, 0)) isEqual:@"fill"]) {
      return [[FFTLengthFill alloc] init];
    }
    else if ([((NSString *) IOSObjectArray_Get(sa, 0)) isEqual:@"equal"]) {
      return [[FFTLengthEquals alloc] initWithNSString:nil];
    }
    else if ([((NSString *) IOSObjectArray_Get(sa, 0)) isEqual:@"compute"]) {
      return [[FFTLengthCompute alloc] init];
    }
    else {
      return [[FFTLengthFixed alloc] initWithDouble:[((FFTFluidApp *) nil_chk(FFTGlobalState_get_fluidApp__())) sizeToPixelsWithNSString:IOSObjectArray_Get(sa, 0)]];
    }
  }
  else {
    return [self parseLengthWithNSStringArray:sa withNSString:value];
  }
}

- (FFTCoord *)getCoordWithNSString:(NSString *)value {
  IOSObjectArray *sa = [((NSString *) nil_chk([((NSString *) nil_chk(value)) trim])) split:@" "];
  if ((int) [((IOSObjectArray *) nil_chk(sa)) count] == 1) {
    return [[FFTCoordFixed alloc] initWithDouble:[((FFTFluidApp *) nil_chk(FFTGlobalState_get_fluidApp__())) sizeToPixelsWithNSString:IOSObjectArray_Get(sa, 0)]];
  }
  else {
    if (![((NSString *) IOSObjectArray_Get(sa, 1)) isEqual:@"of"]) {
      @throw [[JavaLangRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"Unable to determine coordinate for %@, for line%@", value, lastLine_]];
    }
    if ([((NSString *) IOSObjectArray_Get(sa, 2)) isEqual:@"parent"]) {
      JavaUtilArrayList *subtractors = [[JavaUtilArrayList alloc] init];
      if ((int) [sa count] > 3) {
        [self parseConstraintsWithNSString:value withJavaUtilArrayList:subtractors withNSStringArray:sa withInt:3];
      }
      return [[FFTCoordRelativeToParent alloc] initWithNSString:IOSObjectArray_Get(sa, 0) withJavaUtilArrayList:subtractors];
    }
    if ([((NSString *) IOSObjectArray_Get(sa, 2)) isEqual:@"view"]) {
      JavaUtilArrayList *subtractors = [[JavaUtilArrayList alloc] init];
      if ((int) [sa count] > 4) {
        [self parseConstraintsWithNSString:value withJavaUtilArrayList:subtractors withNSStringArray:sa withInt:4];
      }
      return [[FFTCoordRelativeToView alloc] initWithNSString:IOSObjectArray_Get(sa, 0) withNSString:IOSObjectArray_Get(sa, 3) withJavaUtilArrayList:subtractors];
    }
  }
  @throw [[JavaLangRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"Unable to determine length for %@, for line%@", value, lastLine_]];
}

- (FFTLength *)parseLengthWithNSStringArray:(IOSObjectArray *)sa
                               withNSString:(NSString *)value {
  return [self parseLengthWithNSStringArray:sa withNSString:value withInt:0];
}

- (FFTLength *)parseLengthWithNSStringArray:(IOSObjectArray *)sa
                               withNSString:(NSString *)value
                                    withInt:(int)index {
  if (![((NSString *) IOSObjectArray_Get(nil_chk(sa), index + 1)) isEqual:@"of"]) {
    @throw [[JavaLangRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"Unable to determine length for %@, for line%@", value, lastLine_]];
  }
  if ([((NSString *) IOSObjectArray_Get(sa, index + 2)) isEqual:@"parent"]) {
    JavaUtilArrayList *subtractors = [[JavaUtilArrayList alloc] init];
    if (index + (int) [sa count] > 3) {
      [self parseConstraintsWithNSString:value withJavaUtilArrayList:subtractors withNSStringArray:sa withInt:index + 3];
    }
    return [[FFTLengthRelativeToParent alloc] initWithDouble:[JavaLangDouble parseDoubleWithNSString:IOSObjectArray_Get(sa, index)] withJavaUtilArrayList:subtractors];
  }
  else if ([((NSString *) IOSObjectArray_Get(sa, index + 2)) isEqual:@"row"]) {
    JavaUtilArrayList *subtractors = [[JavaUtilArrayList alloc] init];
    if (index + (int) [sa count] > 3) {
      [self parseConstraintsWithNSString:value withJavaUtilArrayList:subtractors withNSStringArray:sa withInt:index + 3];
    }
    return [[FFTLengthRelativeToRow alloc] initWithDouble:[JavaLangDouble parseDoubleWithNSString:IOSObjectArray_Get(sa, index)] withJavaUtilArrayList:subtractors];
  }
  else if ([((NSString *) IOSObjectArray_Get(sa, index + 2)) isEqual:@"view"]) {
    JavaUtilArrayList *subtractors = [[JavaUtilArrayList alloc] init];
    if (index + (int) [sa count] > 4) {
      [self parseConstraintsWithNSString:value withJavaUtilArrayList:subtractors withNSStringArray:sa withInt:index + 4];
    }
    return [[FFTLengthRelativeToView alloc] initWithDouble:[JavaLangDouble parseDoubleWithNSString:IOSObjectArray_Get(sa, index)] withNSString:IOSObjectArray_Get(sa, index + 3) withJavaUtilArrayList:subtractors];
  }
  else if ([((NSString *) IOSObjectArray_Get(sa, index + 2)) isEqual:@"layer"]) {
    JavaUtilArrayList *subtractors = [[JavaUtilArrayList alloc] init];
    if (index + (int) [sa count] > 4) {
      [self parseConstraintsWithNSString:value withJavaUtilArrayList:subtractors withNSStringArray:sa withInt:index + 4];
    }
    return [[FFTLengthRelativeToLayer alloc] initWithDouble:[JavaLangDouble parseDoubleWithNSString:IOSObjectArray_Get(sa, index)] withInt:[JavaLangInteger parseIntWithNSString:IOSObjectArray_Get(sa, index + 3)] withJavaUtilArrayList:subtractors];
  }
  else {
    @throw [[JavaLangRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"Unable to determine length for %@, for line%@", value, lastLine_]];
  }
}

- (void)parseConstraintsWithNSString:(NSString *)value
               withJavaUtilArrayList:(JavaUtilArrayList *)subtractors
                   withNSStringArray:(IOSObjectArray *)sa
                             withInt:(int)index {
  if (index > (int) [((IOSObjectArray *) nil_chk(sa)) count] - 1) {
    return;
  }
  if ([((NSString *) IOSObjectArray_Get(sa, index)) isEqual:@"minus"] || [((NSString *) IOSObjectArray_Get(sa, index)) isEqual:@"plus"]) {
    int sign = [((NSString *) IOSObjectArray_Get(sa, index)) isEqual:@"minus"] ? 1 : -1;
    if ((int) [sa count] > index + 2 && [((NSString *) IOSObjectArray_Get(sa, index + 2)) isEqual:@"of"]) {
      if (![((NSString *) IOSObjectArray_Get(sa, index + 3)) isEqual:@"view"]) {
        @throw [[JavaLangRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"Unable to determine length for %@, for line %@", value, lastLine_]];
      }
      [((JavaUtilArrayList *) nil_chk(subtractors)) addWithId:[[FFTSubtractor alloc] initWithDouble:[JavaLangDouble parseDoubleWithNSString:IOSObjectArray_Get(sa, index + 1)] * sign withNSString:IOSObjectArray_Get(sa, index + 4)]];
      [self parseConstraintsWithNSString:value withJavaUtilArrayList:subtractors withNSStringArray:sa withInt:index + 5];
    }
    else {
      [((JavaUtilArrayList *) nil_chk(subtractors)) addWithId:[[FFTSubtractor alloc] initWithDouble:[JavaLangDouble parseDoubleWithNSString:IOSObjectArray_Get(sa, index + 1)] * sign * [((FFTViewManager *) nil_chk([((FFTFluidApp *) nil_chk(app_)) getViewManager])) getBaseUnit]]];
      [self parseConstraintsWithNSString:value withJavaUtilArrayList:subtractors withNSStringArray:sa withInt:index + 2];
    }
  }
  else {
    @throw [[JavaLangRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"Unable to determine length for %@, for line %@", value, lastLine_]];
  }
}

+ (NSString *)getTableLayoutIdWithNSString:(NSString *)tableLayoutId
                              withNSString:(NSString *)layoutId {
  return [NSString stringWithFormat:@"_TableLayout.%@.%@", tableLayoutId, layoutId];
}

- (FFTTableLayout *)parseTableLayoutWithNSString:(NSString *)id_
                                    withNSString:(NSString *)layoutAsString
                                      withDouble:(double)baseUnit {
  FFTKVLReader *settings;
  @try {
    settings = [[FFTKVLReader alloc] initWithNSString:layoutAsString];
  }
  @catch (JavaIoIOException *e) {
    [FFTLogger errorWithId:self withJavaLangThrowable:e];
    @throw [[JavaLangRuntimeException alloc] initWithJavaLangThrowable:e];
  }
  FFTTableLayout *tableLayout = [[FFTTableLayout alloc] initWithNSString:id_];
  if ([((FFTKVLReader *) nil_chk(settings)) containsWithNSString:@"background-color"]) {
    [tableLayout setBackgroundColorWithFFTColor:[((FFTViewManager *) nil_chk([((FFTFluidApp *) nil_chk(app_)) getViewManager])) getColorWithNSString:[settings getValueWithNSString:@"background-color"]]];
  }
  NSString *layoutIdPrefix = [NSString stringWithFormat:@"_TableLayout.%@.", [tableLayout getId]];
  NSString *sectionHeaderLayoutIdPrefix = [NSString stringWithFormat:@"_TableLayout.%@.header.", [tableLayout getId]];
  for (id<FFTKeyValueList> __strong section in nil_chk([settings getWithNSString:@"sections"])) {
    FFTTableLayout_TableSection *tableSection = [[FFTTableLayout_TableSection alloc] initWithNSString:[((id<FFTKeyValueList>) nil_chk(section)) getValue]];
    [tableSection setSectionHeaderLayoutWithNSString:[NSString stringWithFormat:@"%@%@", sectionHeaderLayoutIdPrefix, [section getValue]]];
    [tableLayout addSectionWithFFTTableLayout_TableSection:tableSection];
    for (NSString * __strong rowId in nil_chk([section getValuesWithNSString:@"rows"])) {
      [tableSection addLayoutWithNSString:[FFTViewsParser getTableLayoutIdWithNSString:[tableLayout getId] withNSString:rowId]];
    }
  }
  for (id<FFTKeyValueListModifyable> __strong row in nil_chk((id<JavaUtilList>) check_protocol_cast([settings getWithNSString:@"section-headers"], @protocol(JavaUtilList)))) {
    id<FFTKeyValueListModifyable> kvl = [[FFTKVLReader_KeyValueListDefault alloc] initWithNSString:[((id<FFTKeyValueListModifyable>) nil_chk(row)) getValue]];
    [row addWithNSString:@"name" withFFTKeyValueList:kvl];
    FFTLayout *layout = [self parseLayoutWithNSString:sectionHeaderLayoutIdPrefix withNSString:[row getValue] withFFTKeyValueList:row withDouble:[((FFTViewManager *) nil_chk([((FFTFluidApp *) nil_chk(app_)) getViewManager])) getBaseUnit]];
    [((FFTViewManager *) nil_chk([app_ getViewManager])) addLayoutWithFFTLayout:layout];
  }
  for (id<FFTKeyValueListModifyable> __strong row in nil_chk((id<JavaUtilList>) check_protocol_cast([settings getWithNSString:@"rows"], @protocol(JavaUtilList)))) {
    id<FFTKeyValueList> kvl = [[FFTKVLReader_KeyValueListDefault alloc] initWithNSString:[((id<FFTKeyValueListModifyable>) nil_chk(row)) getValue]];
    [row addWithNSString:@"name" withFFTKeyValueList:kvl];
    FFTLayout *layout = [self parseLayoutWithNSString:layoutIdPrefix withNSString:[row getValue] withFFTKeyValueList:row withDouble:[((FFTViewManager *) nil_chk([((FFTFluidApp *) nil_chk(app_)) getViewManager])) getBaseUnit]];
    [((FFTViewManager *) nil_chk([app_ getViewManager])) addLayoutWithFFTLayout:layout];
  }
  return tableLayout;
}

- (IOSObjectArray *)getSupportedPlatforms {
  return nil;
}

- (id)init {
  if (self = [super init]) {
    settings_ = nil;
    screen_ = nil;
    anchorSet_ = NO;
    nextHorDir_ = FFTLayout_DirectionEnum_get_RIGHT();
    nextAlignment_ = FFTLayout_AlignEnum_get_TOP();
    viewObjectById_ = nil;
    parsingLandscape_ = NO;
  }
  return self;
}

- (void)copyAllFieldsTo:(FFTViewsParser *)other {
  [super copyAllFieldsTo:other];
  other->anchorSet_ = anchorSet_;
  other->app_ = app_;
  other->currentFile_ = currentFile_;
  other->currentLayout_ = currentLayout_;
  other->lastLine_ = lastLine_;
  other->nextAlignment_ = nextAlignment_;
  other->nextHorDir_ = nextHorDir_;
  other->parsingLandscape_ = parsingLandscape_;
  other->screen_ = screen_;
  other->settings_ = settings_;
  other->viewById_ = viewById_;
  other->viewObjectById_ = viewObjectById_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initialize__WithFFTFluidApp:", "initialize", "V", 0x1, NULL },
    { "getPlatformOrDefaultResourceWithNSString:withNSString:", "getPlatformOrDefaultResource", "Ljava.lang.String;", 0x2, NULL },
    { "getScreenKVLWithNSString:", "getScreenKVL", "Lcom.sponberg.fluid.util.KeyValueList;", 0x2, NULL },
    { "parseLayoutWithNSString:withFFTKeyValueList:withDouble:", "parseLayout", "Lcom.sponberg.fluid.layout.Layout;", 0x2, NULL },
    { "parseLayoutWithNSString:withNSString:withFFTKeyValueList:withDouble:", "parseLayout", "Lcom.sponberg.fluid.layout.Layout;", 0x2, NULL },
    { "parseLayoutWithJavaUtilList:withJavaUtilList:", "parseLayout", "V", 0x2, NULL },
    { "parseRowPropertiesWithNSString:withJavaUtilHashMap:", "parseRowProperties", "Ljava.util.HashMap;", 0x2, NULL },
    { "fixRelativeLengthsWithDouble:", "fixRelativeLengths", "V", 0x2, NULL },
    { "setupViewById", NULL, "V", 0x2, NULL },
    { "parseRowWithNSString:withJavaUtilHashMap:withJavaUtilList:", "parseRow", "V", 0x2, NULL },
    { "parseDownWithNSString:", "parseDown", "V", 0x2, NULL },
    { "parseNewLayerWithJavaUtilHashMap:", "parseNewLayer", "V", 0x2, NULL },
    { "createViewWithNSString:withJavaUtilHashMap:withJavaUtilList:", "createView", "Lcom.sponberg.fluid.layout.View;", 0x2, NULL },
    { "getLengthWithNSString:", "getLength", "Lcom.sponberg.fluid.layout.Length;", 0x2, NULL },
    { "getCoordWithNSString:", "getCoord", "Lcom.sponberg.fluid.layout.Coord;", 0x2, NULL },
    { "parseLengthWithNSStringArray:withNSString:", "parseLength", "Lcom.sponberg.fluid.layout.Length;", 0x4, NULL },
    { "parseLengthWithNSStringArray:withNSString:withInt:", "parseLength", "Lcom.sponberg.fluid.layout.Length;", 0x4, NULL },
    { "parseConstraintsWithNSString:withJavaUtilArrayList:withNSStringArray:withInt:", "parseConstraints", "V", 0x2, NULL },
    { "getTableLayoutIdWithNSString:withNSString:", "getTableLayoutId", "Ljava.lang.String;", 0x9, NULL },
    { "parseTableLayoutWithNSString:withNSString:withDouble:", "parseTableLayout", "Lcom.sponberg.fluid.layout.TableLayout;", 0x2, NULL },
    { "getSupportedPlatforms", NULL, "[Ljava.lang.String;", 0x1, NULL },
    { "init", NULL, NULL, 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "app_", NULL, 0x0, "Lcom.sponberg.fluid.FluidApp;", NULL,  },
    { "settings_", NULL, 0x0, "Lcom.sponberg.fluid.util.KVLReader;", NULL,  },
    { "screen_", NULL, 0x0, "Lcom.sponberg.fluid.util.KeyValueList;", NULL,  },
    { "viewById_", NULL, 0x0, "Ljava.util.HashMap;", NULL,  },
    { "currentLayout_", NULL, 0x0, "Lcom.sponberg.fluid.layout.Layout;", NULL,  },
    { "anchorSet_", NULL, 0x0, "Z", NULL,  },
    { "nextHorDir_", NULL, 0x0, "Lcom.sponberg.fluid.layout.Layout$Direction;", NULL,  },
    { "nextAlignment_", NULL, 0x0, "Lcom.sponberg.fluid.layout.Layout$Align;", NULL,  },
    { "currentFile_", NULL, 0x0, "Ljava.lang.String;", NULL,  },
    { "lastLine_", NULL, 0x0, "Ljava.lang.String;", NULL,  },
    { "viewObjectById_", NULL, 0x0, "Ljava.util.HashMap;", NULL,  },
    { "parsingLandscape_", NULL, 0x0, "Z", NULL,  },
  };
  static J2ObjcClassInfo _FFTViewsParser = { "ViewsParser", "com.sponberg.fluid.parser", NULL, 0x1, 22, methods, 12, fields, 0, NULL};
  return &_FFTViewsParser;
}

@end

@implementation FFTViewsParser_KeyValueListWithRowProperties

- (id)initWithFFTKeyValueList:(id<FFTKeyValueList>)list
          withJavaUtilHashMap:(JavaUtilHashMap *)rowProperties
             withJavaUtilList:(id<JavaUtilList>)layoutVariables {
  if (self = [super init]) {
    self->list_ = list;
    self->rowProperties_ = rowProperties;
    self->layoutVariables_ = layoutVariables;
    keys__ = [[JavaUtilHashSet alloc] initWithJavaUtilCollection:[((id<FFTKeyValueList>) nil_chk(list)) keys]];
    [keys__ addWithId:@"layout-variables"];
  }
  return self;
}

- (id<JavaUtilList>)getWithNSString:(NSString *)key {
  if ([((NSString *) nil_chk(key)) isEqual:@"layout-variables"]) {
    return layoutVariables_;
  }
  else {
    return [((id<FFTKeyValueList>) nil_chk(list_)) getWithNSString:key];
  }
}

- (id<FFTKeyValueList>)getWithValueWithNSString:(NSString *)key
                                   withNSString:(NSString *)value {
  if ([((NSString *) nil_chk(key)) isEqual:@"layout-variables"]) {
    for (id<FFTKeyValueList> __strong kvl in nil_chk(layoutVariables_)) {
      if ([((NSString *) nil_chk([((id<FFTKeyValueList>) nil_chk(kvl)) getValue])) isEqual:value]) {
        return kvl;
      }
    }
    return nil;
  }
  else {
    return [((id<FFTKeyValueList>) nil_chk(list_)) getWithValueWithNSString:key withNSString:value];
  }
}

- (BOOL)containsWithNSString:(NSString *)key {
  return [((id<FFTKeyValueList>) nil_chk(list_)) containsWithNSString:key] || [((JavaUtilHashMap *) nil_chk(rowProperties_)) containsKeyWithId:key] || [((NSString *) nil_chk(key)) isEqual:@"layout-variables"];
}

- (id<JavaUtilList>)getValuesWithNSString:(NSString *)key {
  if ([((NSString *) nil_chk(key)) isEqual:@"layout-variables"]) {
    JavaUtilArrayList *list = [[JavaUtilArrayList alloc] init];
    for (id<FFTKeyValueList> __strong kvl in nil_chk(layoutVariables_)) {
      [list addWithId:[((id<FFTKeyValueList>) nil_chk(kvl)) getValue]];
    }
    return list;
  }
  else if ([((id<FFTKeyValueList>) nil_chk(list_)) containsWithNSString:key]) {
    return [list_ getValuesWithNSString:key];
  }
  else if ([((JavaUtilHashMap *) nil_chk(rowProperties_)) containsKeyWithId:key]) {
    JavaUtilArrayList *values = [[JavaUtilArrayList alloc] init];
    [values addWithId:[rowProperties_ getWithId:key]];
    return values;
  }
  else {
    return nil;
  }
}

- (NSString *)getValueWithNSString:(NSString *)key {
  if ([((NSString *) nil_chk(key)) isEqual:@"layout-variables"]) {
    JavaLangStringBuilder *builder = [[JavaLangStringBuilder alloc] init];
    for (id<FFTKeyValueList> __strong kvl in nil_chk(layoutVariables_)) {
      (void) [builder appendWithNSString:[NSString stringWithFormat:@"%@\n", [((id<FFTKeyValueList>) nil_chk(kvl)) getValue]]];
    }
    return [builder description];
  }
  else if ([((id<FFTKeyValueList>) nil_chk(list_)) containsWithNSString:key]) {
    return [list_ getValueWithNSString:key];
  }
  else if ([((JavaUtilHashMap *) nil_chk(rowProperties_)) containsKeyWithId:key]) {
    return [rowProperties_ getWithId:key];
  }
  else {
    return nil;
  }
}

- (NSString *)getSizeValueWithNSString:(NSString *)key {
  NSString *literalValue = [self getValueWithNSString:key];
  id<FFTKeyValueList> kvl = [self getWithValueWithNSString:@"layout-variables" withNSString:@"sizes"];
  if (kvl != nil) {
    if ([kvl containsWithNSString:literalValue]) {
      return [kvl getValueWithNSString:literalValue];
    }
  }
  return literalValue;
}

- (NSString *)getValue {
  return [((id<FFTKeyValueList>) nil_chk(list_)) getValue];
}

- (id<JavaUtilSet>)keys {
  return keys__;
}

- (void)copyAllFieldsTo:(FFTViewsParser_KeyValueListWithRowProperties *)other {
  [super copyAllFieldsTo:other];
  other->keys__ = keys__;
  other->layoutVariables_ = layoutVariables_;
  other->list_ = list_;
  other->rowProperties_ = rowProperties_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithFFTKeyValueList:withJavaUtilHashMap:withJavaUtilList:", "KeyValueListWithRowProperties", NULL, 0x1, NULL },
    { "getWithNSString:", "get", "Ljava.util.List;", 0x1, NULL },
    { "getWithValueWithNSString:withNSString:", "getWithValue", "Lcom.sponberg.fluid.util.KeyValueList;", 0x1, NULL },
    { "containsWithNSString:", "contains", "Z", 0x1, NULL },
    { "getValuesWithNSString:", "getValues", "Ljava.util.List;", 0x1, NULL },
    { "getValueWithNSString:", "getValue", "Ljava.lang.String;", 0x1, NULL },
    { "getSizeValueWithNSString:", "getSizeValue", "Ljava.lang.String;", 0x1, NULL },
    { "getValue", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "keys", NULL, "Ljava.util.Set;", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "list_", NULL, 0x10, "Lcom.sponberg.fluid.util.KeyValueList;", NULL,  },
    { "rowProperties_", NULL, 0x10, "Ljava.util.HashMap;", NULL,  },
    { "layoutVariables_", NULL, 0x10, "Ljava.util.List;", NULL,  },
    { "keys__", "keys", 0x0, "Ljava.util.HashSet;", NULL,  },
  };
  static J2ObjcClassInfo _FFTViewsParser_KeyValueListWithRowProperties = { "KeyValueListWithRowProperties", "com.sponberg.fluid.parser", "ViewsParser", 0x8, 9, methods, 4, fields, 0, NULL};
  return &_FFTViewsParser_KeyValueListWithRowProperties;
}

@end
