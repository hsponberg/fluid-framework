//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src-delomboked/com/sponberg/fluid/parser/RowProviderTableLayout.java
//

#include "com/sponberg/fluid/layout/TableLayout.h"
#include "com/sponberg/fluid/layout/TableRow.h"
#include "com/sponberg/fluid/parser/RowProviderTableLayout.h"
#include "java/lang/RuntimeException.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

@implementation FFTRowProviderTableLayout

- (id)initWithFFTTableLayout:(FFTTableLayout *)tableLayout {
  if (self = [super init]) {
    sectionRows_ = [[JavaUtilArrayList alloc] init];
    self->tableLayout_ = tableLayout;
    long long int rowId = 0;
    for (FFTTableLayout_TableSection * __strong section in nil_chk([((FFTTableLayout *) nil_chk(tableLayout)) getTableSections])) {
      JavaUtilArrayList *rows = [[JavaUtilArrayList alloc] init];
      [sectionRows_ addWithId:rows];
      for (NSString * __strong id_ in nil_chk([((FFTTableLayout_TableSection *) nil_chk(section)) getLayoutIds])) {
        FFTTableRow *tableRow = [[FFTTableRow alloc] init];
        [tableRow setLayoutWithNSString:id_];
        [tableRow setIdWithLong:rowId++];
        [tableRow setListenToDataModelChangesWithBoolean:YES];
        [rows addWithId:tableRow];
      }
    }
  }
  return self;
}

- (id<JavaUtilList>)getRowsWithInt:(int)section {
  return [((JavaUtilArrayList *) nil_chk(sectionRows_)) getWithInt:section];
}

- (id<JavaUtilList>)getSections {
  return [((FFTTableLayout *) nil_chk(tableLayout_)) getTableSections];
}

- (NSString *)getRowLayout {
  return nil;
}

- (int)getCount {
  int count = 0;
  for (int index = 0; index < [((id<JavaUtilList>) nil_chk([self getSections])) size]; index++) {
    count++;
    count += [((id<JavaUtilList>) nil_chk([self getRowsWithInt:index])) size];
  }
  return count;
}

- (id)getRowOrSectionAtWithInt:(int)index {
  int count = 0;
  for (int sectionIndex = 0; sectionIndex < [((id<JavaUtilList>) nil_chk([self getSections])) size]; sectionIndex++) {
    FFTTableLayout_TableSection *section = [((id<JavaUtilList>) nil_chk([self getSections])) getWithInt:sectionIndex];
    count++;
    if (count - 1 == index) {
      return section;
    }
    if (count + [((id<JavaUtilList>) nil_chk([self getRowsWithInt:sectionIndex])) size] > index) {
      return [((id<JavaUtilList>) nil_chk([self getRowsWithInt:sectionIndex])) getWithInt:index - count];
    }
    count += [((id<JavaUtilList>) nil_chk([self getRowsWithInt:sectionIndex])) size];
  }
  return nil;
}

- (FFTTableRow *)getRowInSectionAtWithInt:(int)sectionIndex
                                  withInt:(int)rowIndex {
  return [((id<JavaUtilList>) nil_chk([self getRowsWithInt:sectionIndex])) getWithInt:rowIndex];
}

- (FFTTableLayout_TableSection *)getSectionAtWithInt:(int)sectionIndex {
  return [((id<JavaUtilList>) nil_chk([self getSections])) getWithInt:sectionIndex];
}

- (int)getNumSections {
  return [((id<JavaUtilList>) nil_chk([self getSections])) size];
}

- (long long int)getItemIdAtWithInt:(int)index {
  id o = [self getRowOrSectionAtWithInt:index];
  if ([o isKindOfClass:[FFTTableLayout_TableSection class]]) {
    return ((int) [((NSString *) nil_chk([((FFTTableLayout_TableSection *) nil_chk(((FFTTableLayout_TableSection *) check_class_cast(o, [FFTTableLayout_TableSection class])))) getSectionId])) hash]);
  }
  else if ([o isKindOfClass:[FFTTableRow class]]) {
    return [((FFTTableRow *) nil_chk(((FFTTableRow *) check_class_cast(o, [FFTTableRow class])))) getId];
  }
  else {
    return -1;
  }
}

- (long long int)getItemIdAtWithInt:(int)sectionIndex
                            withInt:(int)rowIndex {
  return [((FFTTableRow *) nil_chk([self getRowInSectionAtWithInt:sectionIndex withInt:rowIndex])) getId];
}

- (double)getHeightFromObjectWithWithLong:(long long int)id_ {
  @throw [[JavaLangRuntimeException alloc] initWithNSString:@"Not implemented"];
}

- (int)getNumRowsInSectionWithInt:(int)sectionIndex {
  return [((id<JavaUtilList>) nil_chk([((FFTTableLayout_TableSection *) nil_chk([self getSectionAtWithInt:sectionIndex])) getLayoutIds])) size];
}

- (int)getRowIndexOfObjectWithLong:(long long int)id_ {
  @throw [[JavaLangRuntimeException alloc] initWithNSString:@"Not implemented"];
}

- (int)getIndexOfRecentlyDeletedObjectWithLong:(long long int)id_ {
  @throw [[JavaLangRuntimeException alloc] initWithNSString:@"Not implemented"];
}

- (void)copyAllFieldsTo:(FFTRowProviderTableLayout *)other {
  [super copyAllFieldsTo:other];
  other->sectionRows_ = sectionRows_;
  other->tableLayout_ = tableLayout_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithFFTTableLayout:", "RowProviderTableLayout", NULL, 0x1, NULL },
    { "getRowsWithInt:", "getRows", "Ljava.util.List;", 0x2, NULL },
    { "getSections", NULL, "Ljava.util.List;", 0x2, NULL },
    { "getRowLayout", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "getCount", NULL, "I", 0x1, NULL },
    { "getRowOrSectionAtWithInt:", "getRowOrSectionAt", "Ljava.lang.Object;", 0x1, NULL },
    { "getRowInSectionAtWithInt:withInt:", "getRowInSectionAt", "Lcom.sponberg.fluid.layout.TableRow;", 0x1, NULL },
    { "getSectionAtWithInt:", "getSectionAt", "Lcom.sponberg.fluid.layout.TableLayout$TableSection;", 0x1, NULL },
    { "getNumSections", NULL, "I", 0x1, NULL },
    { "getItemIdAtWithInt:", "getItemIdAt", "J", 0x1, NULL },
    { "getItemIdAtWithInt:withInt:", "getItemIdAt", "J", 0x1, NULL },
    { "getHeightFromObjectWithWithLong:", "getHeightFromObjectWith", "D", 0x1, NULL },
    { "getNumRowsInSectionWithInt:", "getNumRowsInSection", "I", 0x1, NULL },
    { "getRowIndexOfObjectWithLong:", "getRowIndexOfObject", "I", 0x1, NULL },
    { "getIndexOfRecentlyDeletedObjectWithLong:", "getIndexOfRecentlyDeletedObject", "I", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "tableLayout_", NULL, 0x10, "Lcom.sponberg.fluid.layout.TableLayout;", NULL,  },
    { "sectionRows_", NULL, 0x10, "Ljava.util.ArrayList;", NULL,  },
  };
  static J2ObjcClassInfo _FFTRowProviderTableLayout = { "RowProviderTableLayout", "com.sponberg.fluid.parser", NULL, 0x1, 15, methods, 2, fields, 0, NULL};
  return &_FFTRowProviderTableLayout;
}

@end
