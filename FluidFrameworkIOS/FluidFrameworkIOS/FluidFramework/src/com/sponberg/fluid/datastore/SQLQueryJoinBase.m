//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src-delomboked/com/sponberg/fluid/datastore/SQLQueryJoinBase.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "com/sponberg/fluid/datastore/SQLParameterizedStatement.h"
#include "com/sponberg/fluid/datastore/SQLQueryJoinBase.h"
#include "com/sponberg/fluid/datastore/SQLQueryResult.h"
#include "com/sponberg/fluid/datastore/SQLQueryResultDefault.h"
#include "com/sponberg/fluid/datastore/SQLWhereClause.h"
#include "java/lang/Boolean.h"
#include "java/lang/Double.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@implementation FFTSQLQueryJoinBase

NSString * FFTSQLQueryJoinBase_kNoTableName_ = @"0 No Table Name";

- (id)initWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)columnsByTableName {
  if (self = [super init]) {
    whereClause_ = nil;
    selectStatement_ = nil;
    offset_ = 0;
    allowRefresh_ = YES;
    limit_ = nil;
    orderBy_ = nil;
    resultClasses_ = [[JavaUtilArrayList alloc] init];
    self->columnsByTableName_ = columnsByTableName;
    [resultClasses_ addWithId:[IOSClass classWithClass:[FFTSQLQueryResultDefault class]]];
  }
  return self;
}

- (void)setWhereClauseWithFFTSQLWhereClause:(FFTSQLWhereClause *)whereClause {
  self->whereClause_ = whereClause;
}

- (void)setWhereWithNSString:(NSString *)where {
  whereClause_ = [[FFTSQLWhereClause alloc] initWithNSString:where];
}

- (FFTSQLWhereClause *)getWhere {
  return whereClause_;
}

- (FFTSQLParameterizedStatement *)getParameterizedStatement {
  JavaUtilArrayList *whereParams = nil;
  JavaLangStringBuilder *builder = [[JavaLangStringBuilder alloc] init];
  (void) [builder appendWithNSString:@"select "];
  if (selectStatement_ != nil) {
    (void) [builder appendWithNSString:selectStatement_];
  }
  else {
    BOOL first = YES;
    for (NSString * __strong tableName in nil_chk([((JavaUtilLinkedHashMap *) nil_chk(columnsByTableName_)) keySet])) {
      for (NSString * __strong column in nil_chk([columnsByTableName_ getWithId:tableName])) {
        if (!first) {
          (void) [builder appendWithNSString:@","];
        }
        first = NO;
        if (![((NSString *) nil_chk(tableName)) isEqual:FFTSQLQueryJoinBase_kNoTableName_]) {
          (void) [builder appendWithNSString:tableName];
          (void) [builder appendWithNSString:@"."];
        }
        (void) [builder appendWithNSString:column];
      }
    }
  }
  (void) [builder appendWithNSString:@" from "];
  BOOL first = YES;
  for (NSString * __strong tableName in nil_chk([((JavaUtilLinkedHashMap *) nil_chk(columnsByTableName_)) keySet])) {
    if ([((NSString *) nil_chk(tableName)) isEqual:FFTSQLQueryJoinBase_kNoTableName_]) {
      continue;
    }
    if (!first) {
      (void) [builder appendWithNSString:@","];
    }
    first = NO;
    (void) [builder appendWithNSString:tableName];
  }
  if (whereClause_ != nil) {
    (void) [builder appendWithNSString:@" where "];
    (void) [builder appendWithNSString:[whereClause_ getWhere]];
    whereParams = [whereClause_ getParameters];
  }
  if (orderBy_ != nil) {
    (void) [builder appendWithNSString:@" "];
    (void) [builder appendWithNSString:orderBy_];
  }
  if (limit_ != nil) {
    (void) [builder appendWithNSString:@" limit "];
    (void) [builder appendWithId:limit_];
    (void) [builder appendWithNSString:@" offset "];
    (void) [builder appendWithInt:offset_];
  }
  return [[FFTSQLParameterizedStatement alloc] initWithNSString:[builder description] withJavaUtilArrayList:nil withJavaUtilArrayList:whereParams];
}

- (int)getResultIndexForColumnWithInt:(int)columnIndex {
  int paramCount = 0;
  int resultIndex = 0;
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((JavaUtilLinkedHashMap *) nil_chk(columnsByTableName_)) entrySet])) {
    paramCount += [((JavaUtilArrayList *) nil_chk([((id<JavaUtilMap_Entry>) nil_chk(entry_)) getValue])) size];
    if (columnIndex < paramCount) {
      return resultIndex;
    }
    resultIndex++;
  }
  @throw [[JavaLangRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"Column index does not exist %d", columnIndex]];
}

- (IOSClass *)getQueryResultClassWithInt:(int)index {
  return [((JavaUtilArrayList *) nil_chk(resultClasses_)) getWithInt:index];
}

- (void)setNullWithInt:(int)columnIndex
          withNSString:(NSString *)columnName {
  [((id<FFTSQLQueryResult>) nil_chk([self resultWithInt:columnIndex])) _setNullWithNSString:columnName];
}

- (void)setIntegerWithInt:(int)columnIndex
             withNSString:(NSString *)columnName
      withJavaLangInteger:(JavaLangInteger *)value {
  [((id<FFTSQLQueryResult>) nil_chk([self resultWithInt:columnIndex])) _setIntegerWithNSString:columnName withJavaLangInteger:value];
}

- (void)setDoubleWithInt:(int)columnIndex
            withNSString:(NSString *)columnName
      withJavaLangDouble:(JavaLangDouble *)value {
  [((id<FFTSQLQueryResult>) nil_chk([self resultWithInt:columnIndex])) _setDoubleWithNSString:columnName withJavaLangDouble:value];
}

- (void)setStringWithInt:(int)columnIndex
            withNSString:(NSString *)columnName
            withNSString:(NSString *)value {
  [((id<FFTSQLQueryResult>) nil_chk([self resultWithInt:columnIndex])) _setStringWithNSString:columnName withNSString:value];
}

- (void)setBinaryWithInt:(int)columnIndex
            withNSString:(NSString *)columnName
           withByteArray:(IOSByteArray *)value {
  [((id<FFTSQLQueryResult>) nil_chk([self resultWithInt:columnIndex])) _setBlobWithNSString:columnName withByteArray:value];
}

- (id<FFTSQLQueryResult>)getCurrentTupleResultWithInt:(int)resultIndex {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<FFTSQLQueryResult>)resultWithInt:(int)columnIndex {
  int resultIndex = [self getResultIndexForColumnWithInt:columnIndex];
  id<FFTSQLQueryResult> result = [self getCurrentTupleResultWithInt:resultIndex];
  return result;
}

- (JavaUtilLinkedHashMap *)getColumnsByTableName {
  return self->columnsByTableName_;
}

- (FFTSQLWhereClause *)getWhereClause {
  return self->whereClause_;
}

- (int)getOffset {
  return self->offset_;
}

- (BOOL)isAllowRefresh {
  return self->allowRefresh_;
}

- (JavaLangInteger *)getLimit {
  return self->limit_;
}

- (NSString *)getOrderBy {
  return self->orderBy_;
}

- (JavaUtilArrayList *)getResultClasses {
  return self->resultClasses_;
}

- (void)setOffsetWithInt:(int)offset {
  self->offset_ = offset;
}

- (void)setAllowRefreshWithBoolean:(BOOL)allowRefresh {
  self->allowRefresh_ = allowRefresh;
}

- (void)setLimitWithJavaLangInteger:(JavaLangInteger *)limit {
  self->limit_ = limit;
}

- (void)setOrderByWithNSString:(NSString *)orderBy {
  self->orderBy_ = orderBy;
}

- (void)setResultClassesWithJavaUtilArrayList:(JavaUtilArrayList *)resultClasses {
  self->resultClasses_ = resultClasses;
}

- (NSString *)description {
  return [NSString stringWithFormat:@"SQLQueryJoinBase(columnsByTableName=%@, whereClause=%@, selectStatement=%@, offset=%d, allowRefresh=%@, limit=%@, orderBy=%@, resultClasses=%@)", [self getColumnsByTableName], [self getWhereClause], self->selectStatement_, [self getOffset], [JavaLangBoolean toStringWithBoolean:[self isAllowRefresh]], [self getLimit], [self getOrderBy], [self getResultClasses]];
}

- (void)addResult {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)stepQuery {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)copyAllFieldsTo:(FFTSQLQueryJoinBase *)other {
  [super copyAllFieldsTo:other];
  other->allowRefresh_ = allowRefresh_;
  other->columnsByTableName_ = columnsByTableName_;
  other->limit_ = limit_;
  other->offset_ = offset_;
  other->orderBy_ = orderBy_;
  other->resultClasses_ = resultClasses_;
  other->selectStatement_ = selectStatement_;
  other->whereClause_ = whereClause_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithJavaUtilLinkedHashMap:", "SQLQueryJoinBase", NULL, 0x1, NULL },
    { "setWhereClauseWithFFTSQLWhereClause:", "setWhereClause", "V", 0x4, NULL },
    { "setWhereWithNSString:", "setWhere", "V", 0x1, NULL },
    { "getWhere", NULL, "Lcom.sponberg.fluid.datastore.SQLWhereClause;", 0x1, NULL },
    { "getParameterizedStatement", NULL, "Lcom.sponberg.fluid.datastore.SQLParameterizedStatement;", 0x1, NULL },
    { "getResultIndexForColumnWithInt:", "getResultIndexForColumn", "I", 0x1, NULL },
    { "getQueryResultClassWithInt:", "getQueryResultClass", "Ljava.lang.Class;", 0x1, NULL },
    { "setNullWithInt:withNSString:", "setNull", "V", 0x1, NULL },
    { "setIntegerWithInt:withNSString:withJavaLangInteger:", "setInteger", "V", 0x1, NULL },
    { "setDoubleWithInt:withNSString:withJavaLangDouble:", "setDouble", "V", 0x1, NULL },
    { "setStringWithInt:withNSString:withNSString:", "setString", "V", 0x1, NULL },
    { "setBinaryWithInt:withNSString:withByteArray:", "setBinary", "V", 0x1, NULL },
    { "getCurrentTupleResultWithInt:", "getCurrentTupleResult", "Lcom.sponberg.fluid.datastore.SQLQueryResult;", 0x404, NULL },
    { "resultWithInt:", "result", "Lcom.sponberg.fluid.datastore.SQLQueryResult;", 0x2, NULL },
    { "getColumnsByTableName", NULL, "Ljava.util.LinkedHashMap;", 0x1, NULL },
    { "getWhereClause", NULL, "Lcom.sponberg.fluid.datastore.SQLWhereClause;", 0x1, NULL },
    { "getOffset", NULL, "I", 0x1, NULL },
    { "isAllowRefresh", NULL, "Z", 0x1, NULL },
    { "getLimit", NULL, "Ljava.lang.Integer;", 0x1, NULL },
    { "getOrderBy", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "getResultClasses", NULL, "Ljava.util.ArrayList;", 0x1, NULL },
    { "setOffsetWithInt:", "setOffset", "V", 0x1, NULL },
    { "setAllowRefreshWithBoolean:", "setAllowRefresh", "V", 0x1, NULL },
    { "setLimitWithJavaLangInteger:", "setLimit", "V", 0x1, NULL },
    { "setOrderByWithNSString:", "setOrderBy", "V", 0x1, NULL },
    { "setResultClassesWithJavaUtilArrayList:", "setResultClasses", "V", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "addResult", NULL, "V", 0x401, NULL },
    { "stepQuery", NULL, "V", 0x401, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "kNoTableName_", NULL, 0x19, "Ljava.lang.String;", &FFTSQLQueryJoinBase_kNoTableName_,  },
    { "columnsByTableName_", NULL, 0x14, "Ljava.util.LinkedHashMap;", NULL,  },
    { "whereClause_", NULL, 0x4, "Lcom.sponberg.fluid.datastore.SQLWhereClause;", NULL,  },
    { "selectStatement_", NULL, 0x4, "Ljava.lang.String;", NULL,  },
    { "offset_", NULL, 0x4, "I", NULL,  },
    { "allowRefresh_", NULL, 0x0, "Z", NULL,  },
    { "limit_", NULL, 0x4, "Ljava.lang.Integer;", NULL,  },
    { "orderBy_", NULL, 0x4, "Ljava.lang.String;", NULL,  },
    { "resultClasses_", NULL, 0x4, "Ljava.util.ArrayList;", NULL,  },
  };
  static J2ObjcClassInfo _FFTSQLQueryJoinBase = { "SQLQueryJoinBase", "com.sponberg.fluid.datastore", NULL, 0x401, 29, methods, 9, fields, 0, NULL};
  return &_FFTSQLQueryJoinBase;
}

@end
