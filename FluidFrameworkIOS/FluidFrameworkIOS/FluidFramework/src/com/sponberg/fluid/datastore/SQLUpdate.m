//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src-delomboked/com/sponberg/fluid/datastore/SQLUpdate.java
//

#include "com/sponberg/fluid/datastore/SQLDataInput.h"
#include "com/sponberg/fluid/datastore/SQLParameterizedStatement.h"
#include "com/sponberg/fluid/datastore/SQLTable.h"
#include "com/sponberg/fluid/datastore/SQLUpdate.h"
#include "com/sponberg/fluid/datastore/SQLWhereClause.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@implementation FFTSQLUpdate

- (id)initWithId:(id<FFTSQLDataInput, FFTSQLTable>)object {
  if (self = [super init]) {
    whereClause_ = nil;
    self->object_ = object;
  }
  return self;
}

- (void)setWhereClauseWithFFTSQLWhereClause:(FFTSQLWhereClause *)whereClause {
  self->whereClause_ = whereClause;
}

- (void)setWhereWithNSString:(NSString *)where {
  whereClause_ = [[FFTSQLWhereClause alloc] initWithNSString:where];
}

- (FFTSQLWhereClause *)getWhere {
  return whereClause_;
}

- (FFTSQLParameterizedStatement *)getParameterizedStatement {
  JavaUtilArrayList *params = [[JavaUtilArrayList alloc] init];
  JavaUtilArrayList *whereParams = nil;
  JavaLangStringBuilder *builder = [[JavaLangStringBuilder alloc] init];
  (void) [builder appendWithNSString:@"update "];
  (void) [builder appendWithNSString:[((id<FFTSQLDataInput, FFTSQLTable>) nil_chk(object_)) _getTableName]];
  (void) [builder appendWithNSString:@" set "];
  BOOL first = YES;
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((id<JavaUtilMap>) nil_chk([((id<FFTSQLDataInput, FFTSQLTable>) object_) _getData])) entrySet])) {
    if (!first) {
      (void) [builder appendWithNSString:@", "];
    }
    first = NO;
    (void) [builder appendWithNSString:[((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey]];
    (void) [builder appendWithNSString:@" = ?"];
    [params addWithId:[[FFTSQLParameterizedStatement_Pair alloc] initWithNSString:[entry_ getKey] withId:[entry_ getValue]]];
  }
  if (whereClause_ != nil) {
    (void) [builder appendWithNSString:@" where "];
    (void) [builder appendWithNSString:[whereClause_ getWhere]];
    whereParams = [whereClause_ getParameters];
  }
  return [[FFTSQLParameterizedStatement alloc] initWithNSString:[builder description] withJavaUtilArrayList:params withJavaUtilArrayList:whereParams];
}

- (NSString *)getTable {
  return [((id<FFTSQLDataInput, FFTSQLTable>) nil_chk(object_)) _getTableName];
}

- (NSString *)description {
  return [NSString stringWithFormat:@"SQLUpdate(object=%@, whereClause=%@)", self->object_, self->whereClause_];
}

- (void)copyAllFieldsTo:(FFTSQLUpdate *)other {
  [super copyAllFieldsTo:other];
  other->object_ = object_;
  other->whereClause_ = whereClause_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithId:", "SQLUpdate", NULL, 0x1, NULL },
    { "setWhereClauseWithFFTSQLWhereClause:", "setWhereClause", "V", 0x4, NULL },
    { "setWhereWithNSString:", "setWhere", "V", 0x1, NULL },
    { "getWhere", NULL, "Lcom.sponberg.fluid.datastore.SQLWhereClause;", 0x1, NULL },
    { "getParameterizedStatement", NULL, "Lcom.sponberg.fluid.datastore.SQLParameterizedStatement;", 0x1, NULL },
    { "getTable", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "object_", NULL, 0x0, "TT;", NULL,  },
    { "whereClause_", NULL, 0x0, "Lcom.sponberg.fluid.datastore.SQLWhereClause;", NULL,  },
  };
  static J2ObjcClassInfo _FFTSQLUpdate = { "SQLUpdate", "com.sponberg.fluid.datastore", NULL, 0x1, 7, methods, 2, fields, 0, NULL};
  return &_FFTSQLUpdate;
}

@end
