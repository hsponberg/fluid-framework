//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src-delomboked/com/sponberg/fluid/datastore/SQLWhereClause.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/sponberg/fluid/datastore/SQLWhereClause.h"
#include "java/lang/Double.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"
#include "java/util/ArrayList.h"
#include "org/slf4j/helpers/FormattingTuple.h"
#include "org/slf4j/helpers/MessageFormatter.h"

@implementation FFTSQLWhereClause

- (id)initWithNSString:(NSString *)where {
  if (self = [super init]) {
    paramNames_ = [[JavaUtilArrayList alloc] init];
    parameters_ = [[JavaUtilArrayList alloc] init];
    self->where_ = where;
  }
  return self;
}

- (id)initWithNSString:(NSString *)where
 withJavaUtilArrayList:(JavaUtilArrayList *)paramNames
 withJavaUtilArrayList:(JavaUtilArrayList *)params {
  if (self = [super init]) {
    paramNames_ = [[JavaUtilArrayList alloc] init];
    parameters_ = [[JavaUtilArrayList alloc] init];
    self->where_ = where;
    self->paramNames_ = paramNames;
    self->parameters_ = params;
  }
  return self;
}

- (NSString *)getWhere {
  for (int index = 0; index < [((JavaUtilArrayList *) nil_chk(parameters_)) size]; index++) {
    if ([parameters_ getWithInt:index] == nil) {
      @throw [[JavaLangRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"Parameter value not be null. Instead of '{} = ?' use '{} is null'. Possibly for %@", [((JavaUtilArrayList *) nil_chk(paramNames_)) getWithInt:index]]];
    }
  }
  NSString *where = [((OrgSlf4jHelpersFormattingTuple *) nil_chk([OrgSlf4jHelpersMessageFormatter arrayFormatWithNSString:self->where_ withNSObjectArray:[((JavaUtilArrayList *) nil_chk(paramNames_)) toArray]])) getMessage];
  return where;
}

- (void)addStringParameterWithNSString:(NSString *)name
                          withNSString:(NSString *)value {
  [((JavaUtilArrayList *) nil_chk(paramNames_)) addWithId:name];
  [((JavaUtilArrayList *) nil_chk(parameters_)) addWithId:value];
}

- (void)addIntegerParameterWithNSString:(NSString *)name
                    withJavaLangInteger:(JavaLangInteger *)value {
  [((JavaUtilArrayList *) nil_chk(paramNames_)) addWithId:name];
  [((JavaUtilArrayList *) nil_chk(parameters_)) addWithId:value];
}

- (void)addDoubleParameterWithNSString:(NSString *)name
                    withJavaLangDouble:(JavaLangDouble *)value {
  [((JavaUtilArrayList *) nil_chk(paramNames_)) addWithId:name];
  [((JavaUtilArrayList *) nil_chk(parameters_)) addWithId:value];
}

- (void)addBlobParameterWithNSString:(NSString *)name
                       withByteArray:(IOSByteArray *)value {
  [((JavaUtilArrayList *) nil_chk(paramNames_)) addWithId:name];
  [((JavaUtilArrayList *) nil_chk(parameters_)) addWithId:value];
}

- (void)addNameParameterWithNSString:(NSString *)name
                        withNSString:(NSString *)name2 {
  [((JavaUtilArrayList *) nil_chk(paramNames_)) addWithId:name];
  [paramNames_ addWithId:name2];
}

- (JavaUtilArrayList *)getParamNames {
  return self->paramNames_;
}

- (JavaUtilArrayList *)getParameters {
  return self->parameters_;
}

- (NSString *)description {
  return [NSString stringWithFormat:@"SQLWhereClause(where=%@, paramNames=%@, parameters=%@)", [self getWhere], [self getParamNames], [self getParameters]];
}

- (void)copyAllFieldsTo:(FFTSQLWhereClause *)other {
  [super copyAllFieldsTo:other];
  other->paramNames_ = paramNames_;
  other->parameters_ = parameters_;
  other->where_ = where_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithNSString:", "SQLWhereClause", NULL, 0x1, NULL },
    { "initWithNSString:withJavaUtilArrayList:withJavaUtilArrayList:", "SQLWhereClause", NULL, 0x1, NULL },
    { "getWhere", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "addStringParameterWithNSString:withNSString:", "addStringParameter", "V", 0x1, NULL },
    { "addIntegerParameterWithNSString:withJavaLangInteger:", "addIntegerParameter", "V", 0x1, NULL },
    { "addDoubleParameterWithNSString:withJavaLangDouble:", "addDoubleParameter", "V", 0x1, NULL },
    { "addBlobParameterWithNSString:withByteArray:", "addBlobParameter", "V", 0x1, NULL },
    { "addNameParameterWithNSString:withNSString:", "addNameParameter", "V", 0x1, NULL },
    { "getParamNames", NULL, "Ljava.util.ArrayList;", 0x1, NULL },
    { "getParameters", NULL, "Ljava.util.ArrayList;", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "where_", NULL, 0x10, "Ljava.lang.String;", NULL,  },
    { "paramNames_", NULL, 0x0, "Ljava.util.ArrayList;", NULL,  },
    { "parameters_", NULL, 0x0, "Ljava.util.ArrayList;", NULL,  },
  };
  static J2ObjcClassInfo _FFTSQLWhereClause = { "SQLWhereClause", "com.sponberg.fluid.datastore", NULL, 0x1, 11, methods, 3, fields, 0, NULL};
  return &_FFTSQLWhereClause;
}

@end
