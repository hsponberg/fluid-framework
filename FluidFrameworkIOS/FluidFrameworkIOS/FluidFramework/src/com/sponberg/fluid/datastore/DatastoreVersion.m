//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src-delomboked/com/sponberg/fluid/datastore/DatastoreVersion.java
//

#include "com/sponberg/fluid/datastore/DatastoreVersion.h"
#include "java/lang/ClassCastException.h"

@implementation FFTDatastoreVersion

- (id)initWithInt:(int)majorVersion
          withInt:(int)minorVersion {
  if (self = [super init]) {
    self->majorVersion_ = majorVersion;
    self->minorVersion_ = minorVersion;
  }
  return self;
}

- (int)compareToWithId:(FFTDatastoreVersion *)o {
  if (o != nil && ![o isKindOfClass:[FFTDatastoreVersion class]]) {
    @throw [[JavaLangClassCastException alloc] init];
  }
  int i = majorVersion_ - ((FFTDatastoreVersion *) nil_chk(o))->majorVersion_;
  if (i != 0) {
    return i;
  }
  else {
    return minorVersion_ - o->minorVersion_;
  }
}

- (int)getMajorVersion {
  return self->majorVersion_;
}

- (int)getMinorVersion {
  return self->minorVersion_;
}

- (BOOL)isEqual:(id)o {
  if (o == self) return YES;
  if (!([o isKindOfClass:[FFTDatastoreVersion class]])) return NO;
  FFTDatastoreVersion *other = (FFTDatastoreVersion *) check_class_cast(o, [FFTDatastoreVersion class]);
  if (![((FFTDatastoreVersion *) nil_chk(other)) canEqualWithId:(id) check_class_cast(self, [NSObject class])]) return NO;
  if ([self getMajorVersion] != [other getMajorVersion]) return NO;
  if ([self getMinorVersion] != [other getMinorVersion]) return NO;
  return YES;
}

- (BOOL)canEqualWithId:(id)other {
  return [other isKindOfClass:[FFTDatastoreVersion class]];
}

- (NSUInteger)hash {
  int PRIME = 59;
  int result = 1;
  result = result * PRIME + [self getMajorVersion];
  result = result * PRIME + [self getMinorVersion];
  return result;
}

- (NSString *)description {
  return [NSString stringWithFormat:@"DatastoreVersion(majorVersion=%d, minorVersion=%d)", [self getMajorVersion], [self getMinorVersion]];
}

- (void)copyAllFieldsTo:(FFTDatastoreVersion *)other {
  [super copyAllFieldsTo:other];
  other->majorVersion_ = majorVersion_;
  other->minorVersion_ = minorVersion_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithInt:withInt:", "DatastoreVersion", NULL, 0x1, NULL },
    { "compareToWithFFTDatastoreVersion:", "compareTo", "I", 0x1, NULL },
    { "getMajorVersion", NULL, "I", 0x1, NULL },
    { "getMinorVersion", NULL, "I", 0x1, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL },
    { "canEqualWithId:", "canEqual", "Z", 0x4, NULL },
    { "hash", "hashCode", "I", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "majorVersion_", NULL, 0x10, "I", NULL,  },
    { "minorVersion_", NULL, 0x10, "I", NULL,  },
  };
  static J2ObjcClassInfo _FFTDatastoreVersion = { "DatastoreVersion", "com.sponberg.fluid.datastore", NULL, 0x1, 8, methods, 2, fields, 0, NULL};
  return &_FFTDatastoreVersion;
}

@end
