//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src-delomboked/com/sponberg/fluid/datastore/DSBase.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "com/sponberg/fluid/datastore/DSBase.h"
#include "java/lang/Double.h"
#include "java/lang/Integer.h"
#include "java/util/HashMap.h"

@implementation FFTDSBase

- (void)_setStringWithNSString:(NSString *)columnName
                  withNSString:(NSString *)value {
  (void) [((JavaUtilHashMap *) nil_chk(_data_)) putWithId:columnName withId:value];
}

- (void)_setIntegerWithNSString:(NSString *)columnName
            withJavaLangInteger:(JavaLangInteger *)value {
  (void) [((JavaUtilHashMap *) nil_chk(_data_)) putWithId:columnName withId:value];
}

- (void)_setDoubleWithNSString:(NSString *)columnName
            withJavaLangDouble:(JavaLangDouble *)value {
  (void) [((JavaUtilHashMap *) nil_chk(_data_)) putWithId:columnName withId:value];
}

- (void)_setNullWithNSString:(NSString *)columnName {
  (void) [((JavaUtilHashMap *) nil_chk(_data_)) putWithId:columnName withId:nil];
}

- (void)_setBlobWithNSString:(NSString *)columnName
               withByteArray:(IOSByteArray *)value {
  (void) [((JavaUtilHashMap *) nil_chk(_data_)) putWithId:columnName withId:value];
}

- (JavaUtilHashMap *)_getData {
  return _data_;
}

- (BOOL)isEqual:(id)o {
  if (o == self) return YES;
  if (!([o isKindOfClass:[FFTDSBase class]])) return NO;
  FFTDSBase *other = (FFTDSBase *) check_class_cast(o, [FFTDSBase class]);
  if (![((FFTDSBase *) nil_chk(other)) canEqualWithId:(id) check_class_cast(self, [NSObject class])]) return NO;
  id this$_data = self->_data_;
  id other$_data = other->_data_;
  if (this$_data == nil ? other$_data != nil : ![this$_data isEqual:other$_data]) return NO;
  return YES;
}

- (BOOL)canEqualWithId:(id)other {
  return [other isKindOfClass:[FFTDSBase class]];
}

- (NSUInteger)hash {
  int PRIME = 59;
  int result = 1;
  id $_data = self->_data_;
  result = result * PRIME + ($_data == nil ? 0 : ((int) [$_data hash]));
  return result;
}

- (NSString *)description {
  return [NSString stringWithFormat:@"DSBase(_data=%@)", self->_data_];
}

- (id)init {
  if (self = [super init]) {
    _data_ = [[JavaUtilHashMap alloc] init];
  }
  return self;
}

- (void)copyAllFieldsTo:(FFTDSBase *)other {
  [super copyAllFieldsTo:other];
  other->_data_ = _data_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "_setStringWithNSString:withNSString:", "_setString", "V", 0x1, NULL },
    { "_setIntegerWithNSString:withJavaLangInteger:", "_setInteger", "V", 0x1, NULL },
    { "_setDoubleWithNSString:withJavaLangDouble:", "_setDouble", "V", 0x1, NULL },
    { "_setNullWithNSString:", "_setNull", "V", 0x1, NULL },
    { "_setBlobWithNSString:withByteArray:", "_setBlob", "V", 0x1, NULL },
    { "_getData", NULL, "Ljava.util.HashMap;", 0x1, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL },
    { "canEqualWithId:", "canEqual", "Z", 0x4, NULL },
    { "hash", "hashCode", "I", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "init", NULL, NULL, 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "_data_", NULL, 0x4, "Ljava.util.HashMap;", NULL,  },
  };
  static J2ObjcClassInfo _FFTDSBase = { "DSBase", "com.sponberg.fluid.datastore", NULL, 0x401, 11, methods, 1, fields, 0, NULL};
  return &_FFTDSBase;
}

@end
