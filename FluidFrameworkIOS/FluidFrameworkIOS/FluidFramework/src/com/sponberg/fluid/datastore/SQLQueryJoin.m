//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src-delomboked/com/sponberg/fluid/datastore/SQLQueryJoin.java
//

#include "IOSClass.h"
#include "com/sponberg/fluid/FluidApp.h"
#include "com/sponberg/fluid/GlobalState.h"
#include "com/sponberg/fluid/datastore/DatastoreException.h"
#include "com/sponberg/fluid/datastore/DatastoreService.h"
#include "com/sponberg/fluid/datastore/SQLQueryJoin.h"
#include "com/sponberg/fluid/datastore/SQLQueryJoinBase.h"
#include "com/sponberg/fluid/datastore/SQLQueryResult.h"
#include "com/sponberg/fluid/datastore/SQLQueryResultTuple.h"
#include "com/sponberg/fluid/datastore/SQLResultList.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/InstantiationException.h"
#include "java/util/ArrayList.h"
#include "java/util/LinkedHashMap.h"

@implementation FFTSQLQueryJoin

- (id)initWithIOSClass:(IOSClass *)queryResultClass
          withIOSClass:(IOSClass *)queryResultClass2
withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)columnsByTableName {
  if (self = [super initWithJavaUtilLinkedHashMap:columnsByTableName]) {
    self->results_ = [[FFTSQLResultList alloc] initWithFFTSQLExecutableQuery:self];
    [((JavaUtilArrayList *) nil_chk(resultClasses_)) addWithId:queryResultClass];
    [resultClasses_ addWithId:queryResultClass2];
  }
  return self;
}

- (void)addResult {
  tuple_ = [[FFTSQLQueryResultTuple alloc] init];
  [tuple_ createInstanceWithInt:0 withIOSClass:[self getQueryResultClassWithInt:0]];
  [tuple_ createInstanceWithInt:1 withIOSClass:[self getQueryResultClassWithInt:1]];
  [tuple_ createInstanceWithInt:2 withIOSClass:[self getQueryResultClassWithInt:2]];
  [((FFTSQLResultList *) nil_chk(results_)) addWithId:tuple_];
}

- (id<FFTSQLQueryResult>)getCurrentTupleResultWithInt:(int)resultIndex {
  return [((FFTSQLQueryResultTuple *) nil_chk(tuple_)) getResultWithInt:resultIndex];
}

- (void)stepQuery {
  (void) [((id<FFTDatastoreService>) nil_chk([((FFTFluidApp *) nil_chk(FFTGlobalState_get_fluidApp__())) getDatastoreService])) queryWithFFTSQLQueryJoin:self];
}

- (FFTSQLResultList *)getResults {
  return self->results_;
}

- (FFTSQLQueryResultTuple *)getTuple {
  return self->tuple_;
}

- (void)setResultsWithFFTSQLResultList:(FFTSQLResultList *)results {
  self->results_ = results;
}

- (void)setTupleWithFFTSQLQueryResultTuple:(FFTSQLQueryResultTuple *)tuple {
  self->tuple_ = tuple;
}

- (void)copyAllFieldsTo:(FFTSQLQueryJoin *)other {
  [super copyAllFieldsTo:other];
  other->results_ = results_;
  other->tuple_ = tuple_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithIOSClass:withIOSClass:withJavaUtilLinkedHashMap:", "SQLQueryJoin", NULL, 0x1, NULL },
    { "addResult", NULL, "V", 0x1, "Ljava.lang.InstantiationException;Ljava.lang.IllegalAccessException;" },
    { "getCurrentTupleResultWithInt:", "getCurrentTupleResult", "Lcom.sponberg.fluid.datastore.SQLQueryResult;", 0x4, NULL },
    { "stepQuery", NULL, "V", 0x1, "Lcom.sponberg.fluid.datastore.DatastoreException;" },
    { "getResults", NULL, "Lcom.sponberg.fluid.datastore.SQLResultList;", 0x1, NULL },
    { "getTuple", NULL, "Lcom.sponberg.fluid.datastore.SQLQueryResultTuple;", 0x1, NULL },
    { "setResultsWithFFTSQLResultList:", "setResults", "V", 0x1, NULL },
    { "setTupleWithFFTSQLQueryResultTuple:", "setTuple", "V", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "results_", NULL, 0x0, "Lcom.sponberg.fluid.datastore.SQLResultList;", NULL,  },
    { "tuple_", NULL, 0x0, "Lcom.sponberg.fluid.datastore.SQLQueryResultTuple;", NULL,  },
  };
  static J2ObjcClassInfo _FFTSQLQueryJoin = { "SQLQueryJoin", "com.sponberg.fluid.datastore", NULL, 0x1, 8, methods, 2, fields, 0, NULL};
  return &_FFTSQLQueryJoin;
}

@end
