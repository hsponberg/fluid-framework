//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src-delomboked/com/sponberg/fluid/layout/ViewPosition.java
//

#include "com/sponberg/fluid/FluidApp.h"
#include "com/sponberg/fluid/GlobalState.h"
#include "com/sponberg/fluid/layout/DataModelManager.h"
#include "com/sponberg/fluid/layout/View.h"
#include "com/sponberg/fluid/layout/ViewBehavior.h"
#include "com/sponberg/fluid/layout/ViewPosition.h"
#include "java/lang/Boolean.h"
#include "java/lang/Double.h"

@implementation FFTViewPosition

- (id)initWithNSString:(NSString *)viewPath
           withFFTView:(FFTView *)view {
  if (self = [super init]) {
    self->id__ = ((FFTView *) nil_chk(view))->id__;
    self->key_ = view->key_;
    self->visibleCondition_ = view->visibleCondition_;
    self->viewBehavior_ = view->viewBehavior_;
    self->x_ = [((JavaLangDouble *) nil_chk(view->x_)) doubleValue];
    self->y_ = [((JavaLangDouble *) nil_chk(view->y_)) doubleValue];
    self->width_ = [((JavaLangDouble *) nil_chk(view->width_)) doubleValue];
    self->height_ = [((JavaLangDouble *) nil_chk(view->height_)) doubleValue];
    self->visible_ = view->visible_;
    self->viewPathKey_ = [NSString stringWithFormat:@"%@.%@", viewPath, [view getId]];
  }
  return self;
}

- (id)initWithNSString:(NSString *)viewPathKey
               withInt:(int)height {
  if (self = [super init]) {
    self->height_ = height;
    self->viewPathKey_ = viewPathKey;
    self->id__ = nil;
    self->key_ = nil;
    self->visibleCondition_ = nil;
    self->viewBehavior_ = nil;
    self->x_ = -1;
    self->y_ = -1;
    self->width_ = -1;
    self->visible_ = YES;
  }
  return self;
}

- (id)initWithNSString:(NSString *)id_
          withNSString:(NSString *)key
          withNSString:(NSString *)visibleCondition
            withDouble:(double)x
            withDouble:(double)y
            withDouble:(double)width
            withDouble:(double)height
           withBoolean:(BOOL)visible
          withNSString:(NSString *)viewPathKey {
  if (self = [super init]) {
    self->id__ = id_;
    self->key_ = key;
    self->visibleCondition_ = visibleCondition;
    self->x_ = x;
    self->y_ = y;
    self->width_ = width;
    self->height_ = height;
    self->visible_ = visible;
    self->viewPathKey_ = viewPathKey;
  }
  return self;
}

- (NSString *)getValueWithNSString:(NSString *)prefix
                      withNSString:(NSString *)keys
                      withNSString:(NSString *)messageFormat {
  NSString *unkownText = [((FFTViewBehavior *) nil_chk(viewBehavior_)) getUnknownText];
  return [((FFTDataModelManager *) nil_chk([((FFTFluidApp *) nil_chk(FFTGlobalState_get_fluidApp__())) getDataModelManager])) getValueWithNSString:prefix withNSString:keys withNSString:messageFormat withNSString:unkownText];
}

- (void)setValueWithNSString:(NSString *)prefix
                withNSString:(NSString *)key
                      withId:(id)value {
  [((FFTDataModelManager *) nil_chk([((FFTFluidApp *) nil_chk(FFTGlobalState_get_fluidApp__())) getDataModelManager])) setValueWithNSString:prefix withNSString:key withId:value];
}

- (NSString *)getId {
  return self->id__;
}

- (NSString *)getKey {
  return self->key_;
}

- (NSString *)getVisibleCondition {
  return self->visibleCondition_;
}

- (FFTViewBehavior *)getViewBehavior {
  return self->viewBehavior_;
}

- (double)getX {
  return self->x_;
}

- (double)getY {
  return self->y_;
}

- (double)getWidth {
  return self->width_;
}

- (double)getHeight {
  return self->height_;
}

- (BOOL)isVisible {
  return self->visible_;
}

- (NSString *)getViewPathKey {
  return self->viewPathKey_;
}

- (void)setViewBehaviorWithFFTViewBehavior:(FFTViewBehavior *)viewBehavior {
  self->viewBehavior_ = viewBehavior;
}

- (BOOL)isEqual:(id)o {
  if (o == self) return YES;
  if (!([o isKindOfClass:[FFTViewPosition class]])) return NO;
  FFTViewPosition *other = (FFTViewPosition *) check_class_cast(o, [FFTViewPosition class]);
  if (![((FFTViewPosition *) nil_chk(other)) canEqualWithId:(id) check_class_cast(self, [NSObject class])]) return NO;
  id this$id = [self getId];
  id other$id = [other getId];
  if (this$id == nil ? other$id != nil : ![this$id isEqual:other$id]) return NO;
  id this$key = [self getKey];
  id other$key = [other getKey];
  if (this$key == nil ? other$key != nil : ![this$key isEqual:other$key]) return NO;
  id this$visibleCondition = [self getVisibleCondition];
  id other$visibleCondition = [other getVisibleCondition];
  if (this$visibleCondition == nil ? other$visibleCondition != nil : ![this$visibleCondition isEqual:other$visibleCondition]) return NO;
  id this$viewBehavior = [self getViewBehavior];
  id other$viewBehavior = [other getViewBehavior];
  if (this$viewBehavior == nil ? other$viewBehavior != nil : ![this$viewBehavior isEqual:other$viewBehavior]) return NO;
  if ([JavaLangDouble compareWithDouble:[self getX] withDouble:[other getX]] != 0) return NO;
  if ([JavaLangDouble compareWithDouble:[self getY] withDouble:[other getY]] != 0) return NO;
  if ([JavaLangDouble compareWithDouble:[self getWidth] withDouble:[other getWidth]] != 0) return NO;
  if ([JavaLangDouble compareWithDouble:[self getHeight] withDouble:[other getHeight]] != 0) return NO;
  if ([self isVisible] != [other isVisible]) return NO;
  id this$viewPathKey = [self getViewPathKey];
  id other$viewPathKey = [other getViewPathKey];
  if (this$viewPathKey == nil ? other$viewPathKey != nil : ![this$viewPathKey isEqual:other$viewPathKey]) return NO;
  return YES;
}

- (BOOL)canEqualWithId:(id)other {
  return [other isKindOfClass:[FFTViewPosition class]];
}

- (NSUInteger)hash {
  int PRIME = 59;
  int result = 1;
  id $id = [self getId];
  result = result * PRIME + ($id == nil ? 0 : ((int) [$id hash]));
  id $key = [self getKey];
  result = result * PRIME + ($key == nil ? 0 : ((int) [$key hash]));
  id $visibleCondition = [self getVisibleCondition];
  result = result * PRIME + ($visibleCondition == nil ? 0 : ((int) [$visibleCondition hash]));
  id $viewBehavior = [self getViewBehavior];
  result = result * PRIME + ($viewBehavior == nil ? 0 : ((int) [$viewBehavior hash]));
  long long int $x = [JavaLangDouble doubleToLongBitsWithDouble:[self getX]];
  result = result * PRIME + (int) ((long long) (((unsigned long long) $x) >> 32) ^ $x);
  long long int $y = [JavaLangDouble doubleToLongBitsWithDouble:[self getY]];
  result = result * PRIME + (int) ((long long) (((unsigned long long) $y) >> 32) ^ $y);
  long long int $width = [JavaLangDouble doubleToLongBitsWithDouble:[self getWidth]];
  result = result * PRIME + (int) ((long long) (((unsigned long long) $width) >> 32) ^ $width);
  long long int $height = [JavaLangDouble doubleToLongBitsWithDouble:[self getHeight]];
  result = result * PRIME + (int) ((long long) (((unsigned long long) $height) >> 32) ^ $height);
  result = result * PRIME + ([self isVisible] ? 79 : 97);
  id $viewPathKey = [self getViewPathKey];
  result = result * PRIME + ($viewPathKey == nil ? 0 : ((int) [$viewPathKey hash]));
  return result;
}

- (NSString *)description {
  return [NSString stringWithFormat:@"ViewPosition(id=%@, key=%@, visibleCondition=%@, viewBehavior=%@, x=%f, y=%f, width=%f, height=%f, visible=%@, viewPathKey=%@)", [self getId], [self getKey], [self getVisibleCondition], [self getViewBehavior], [self getX], [self getY], [self getWidth], [self getHeight], [JavaLangBoolean toStringWithBoolean:[self isVisible]], [self getViewPathKey]];
}

- (void)copyAllFieldsTo:(FFTViewPosition *)other {
  [super copyAllFieldsTo:other];
  other->height_ = height_;
  other->id__ = id__;
  other->key_ = key_;
  other->viewBehavior_ = viewBehavior_;
  other->viewPathKey_ = viewPathKey_;
  other->visible_ = visible_;
  other->visibleCondition_ = visibleCondition_;
  other->width_ = width_;
  other->x_ = x_;
  other->y_ = y_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withFFTView:", "ViewPosition", NULL, 0x1, NULL },
    { "initWithNSString:withInt:", "ViewPosition", NULL, 0x1, NULL },
    { "initWithNSString:withNSString:withNSString:withDouble:withDouble:withDouble:withDouble:withBoolean:withNSString:", "ViewPosition", NULL, 0x1, NULL },
    { "getValueWithNSString:withNSString:withNSString:", "getValue", "Ljava.lang.String;", 0x1, NULL },
    { "setValueWithNSString:withNSString:withId:", "setValue", "V", 0x1, NULL },
    { "getId", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "getKey", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "getVisibleCondition", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "getViewBehavior", NULL, "Lcom.sponberg.fluid.layout.ViewBehavior;", 0x1, NULL },
    { "getX", NULL, "D", 0x1, NULL },
    { "getY", NULL, "D", 0x1, NULL },
    { "getWidth", NULL, "D", 0x1, NULL },
    { "getHeight", NULL, "D", 0x1, NULL },
    { "isVisible", NULL, "Z", 0x1, NULL },
    { "getViewPathKey", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "setViewBehaviorWithFFTViewBehavior:", "setViewBehavior", "V", 0x1, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL },
    { "canEqualWithId:", "canEqual", "Z", 0x4, NULL },
    { "hash", "hashCode", "I", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "id__", "id", 0x10, "Ljava.lang.String;", NULL,  },
    { "key_", NULL, 0x10, "Ljava.lang.String;", NULL,  },
    { "visibleCondition_", NULL, 0x10, "Ljava.lang.String;", NULL,  },
    { "viewBehavior_", NULL, 0x0, "Lcom.sponberg.fluid.layout.ViewBehavior;", NULL,  },
    { "x_", NULL, 0x10, "D", NULL,  },
    { "y_", NULL, 0x10, "D", NULL,  },
    { "width_", NULL, 0x10, "D", NULL,  },
    { "height_", NULL, 0x10, "D", NULL,  },
    { "visible_", NULL, 0x10, "Z", NULL,  },
    { "viewPathKey_", NULL, 0x10, "Ljava.lang.String;", NULL,  },
  };
  static J2ObjcClassInfo _FFTViewPosition = { "ViewPosition", "com.sponberg.fluid.layout", NULL, 0x1, 20, methods, 10, fields, 0, NULL};
  return &_FFTViewPosition;
}

@end
