//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src-delomboked/com/sponberg/fluid/layout/ViewBehaviorLabel.java
//

#include "IOSClass.h"
#include "com/sponberg/fluid/FluidApp.h"
#include "com/sponberg/fluid/GlobalState.h"
#include "com/sponberg/fluid/layout/Color.h"
#include "com/sponberg/fluid/layout/DataModelManager.h"
#include "com/sponberg/fluid/layout/UIService.h"
#include "com/sponberg/fluid/layout/View.h"
#include "com/sponberg/fluid/layout/ViewBehavior.h"
#include "com/sponberg/fluid/layout/ViewBehaviorLabel.h"
#include "com/sponberg/fluid/util/KeyValueList.h"
#include "com/sponberg/fluid/util/LRUCache.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/RuntimeException.h"

BOOL FFTViewBehaviorLabel_initialized = NO;

@implementation FFTViewBehaviorLabel

FFTLRUCache * FFTViewBehaviorLabel_cache_;

- (id)initWithFFTKeyValueList:(id<FFTKeyValueList>)properties {
  if (self = [super initWithNSString:FFTViewBehavior_get_label_() withFFTKeyValueList:properties]) {
    minHeight_ = [[super class] getDoublePropertyWithNSString:@"min-h" withJavaLangDouble:nil withFFTKeyValueList:properties];
    if (minHeight_ != nil) {
      minHeight_ = [JavaLangDouble valueOfWithDouble:[((FFTFluidApp *) nil_chk(FFTGlobalState_get_fluidApp__())) unitsToPixelsWithDouble:[minHeight_ doubleValue]]];
    }
    self->textColorPressed_ = [self getColorPropertyWithNSString:@"text-color-pressed" withFFTColor:nil withFFTKeyValueList:properties];
  }
  return self;
}

- (BOOL)supportsHeightCompute {
  return YES;
}

- (float)computeHeightWithBoolean:(BOOL)landcape
                     withNSString:(NSString *)dataModelPrefix
                      withFFTView:(FFTView *)view
                      withBoolean:(BOOL)useCache {
  NSString *text = [self getText];
  if ([((FFTView *) nil_chk(view)) getKey] != nil) {
    NSString *unknownText = [self getUnknownText];
    text = [((FFTDataModelManager *) nil_chk([((FFTFluidApp *) nil_chk(FFTGlobalState_get_fluidApp__())) getDataModelManager])) getValueWithNSString:dataModelPrefix withNSString:[view getKey] withNSString:text withNSString:unknownText];
  }
  JavaLangDouble *width = [view getWidth];
  if (width == nil) {
    @throw [[JavaLangRuntimeException alloc] initWithNSString:@"View's width must be set before calling computeHeight"];
  }
  if (fontSize_ == nil) {
    @throw [[JavaLangRuntimeException alloc] initWithNSString:@"Must set font-size with compute height"];
  }
  NSString *cacheKey = nil;
  if (FFTFluidApp_useCaching) {
    cacheKey = [NSString stringWithFormat:@"%@|%@|%f", text, width, [((JavaLangDouble *) nil_chk(fontSize_)) floatValue]];
    JavaLangFloat *v = [((FFTLRUCache *) nil_chk(FFTViewBehaviorLabel_cache_)) getWithId:cacheKey];
    if (v != nil) {
      return [v floatValue];
    }
  }
  float computedHeight = [((id<FFTUIService>) nil_chk([((FFTFluidApp *) nil_chk(FFTGlobalState_get_fluidApp__())) getUiService])) computeHeightOfTextWithNSString:text withFloat:[((JavaLangDouble *) nil_chk(width)) floatValue] withNSString:nil withFloat:[((JavaLangDouble *) nil_chk(self->fontSize_)) floatValue]];
  if (minHeight_ != nil && [minHeight_ doubleValue] > computedHeight) {
    computedHeight = [minHeight_ floatValue];
  }
  if (FFTFluidApp_useCaching) {
    (void) [((FFTLRUCache *) nil_chk(FFTViewBehaviorLabel_cache_)) putWithId:cacheKey withId:[JavaLangFloat valueOfWithFloat:computedHeight]];
  }
  return computedHeight;
}

- (NSString *)description {
  return [NSString stringWithFormat:@"ViewBehaviorLabel(minHeight=%@, textColorPressed=%@)", [self getMinHeight], [self getTextColorPressed]];
}

- (JavaLangDouble *)getMinHeight {
  return self->minHeight_;
}

- (FFTColor *)getTextColorPressed {
  return self->textColorPressed_;
}

- (void)setMinHeightWithJavaLangDouble:(JavaLangDouble *)minHeight {
  self->minHeight_ = minHeight;
}

- (void)setTextColorPressedWithFFTColor:(FFTColor *)textColorPressed {
  self->textColorPressed_ = textColorPressed;
}

+ (void)initialize {
  if (self == [FFTViewBehaviorLabel class]) {
    FFTViewBehaviorLabel_cache_ = [[FFTLRUCache alloc] initWithInt:100];
    FFTViewBehaviorLabel_initialized = YES;
  }
}

- (void)copyAllFieldsTo:(FFTViewBehaviorLabel *)other {
  [super copyAllFieldsTo:other];
  other->minHeight_ = minHeight_;
  other->textColorPressed_ = textColorPressed_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithFFTKeyValueList:", "ViewBehaviorLabel", NULL, 0x1, NULL },
    { "supportsHeightCompute", NULL, "Z", 0x4, NULL },
    { "computeHeightWithBoolean:withNSString:withFFTView:withBoolean:", "computeHeight", "F", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "getMinHeight", NULL, "Ljava.lang.Double;", 0x1, NULL },
    { "getTextColorPressed", NULL, "Lcom.sponberg.fluid.layout.Color;", 0x1, NULL },
    { "setMinHeightWithJavaLangDouble:", "setMinHeight", "V", 0x1, NULL },
    { "setTextColorPressedWithFFTColor:", "setTextColorPressed", "V", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "minHeight_", NULL, 0x0, "Ljava.lang.Double;", NULL,  },
    { "textColorPressed_", NULL, 0x1, "Lcom.sponberg.fluid.layout.Color;", NULL,  },
    { "cache_", NULL, 0x8, "Lcom.sponberg.fluid.util.LRUCache;", &FFTViewBehaviorLabel_cache_,  },
  };
  static J2ObjcClassInfo _FFTViewBehaviorLabel = { "ViewBehaviorLabel", "com.sponberg.fluid.layout", NULL, 0x1, 8, methods, 3, fields, 0, NULL};
  return &_FFTViewBehaviorLabel;
}

@end
