//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src-delomboked/com/sponberg/fluid/layout/ViewBehaviorImage.java
//

#include "IOSClass.h"
#include "com/sponberg/fluid/FluidApp.h"
#include "com/sponberg/fluid/GlobalState.h"
#include "com/sponberg/fluid/layout/DataModelManager.h"
#include "com/sponberg/fluid/layout/ImageManager.h"
#include "com/sponberg/fluid/layout/ViewBehavior.h"
#include "com/sponberg/fluid/layout/ViewBehaviorImage.h"
#include "com/sponberg/fluid/util/KeyValueList.h"
#include "java/lang/Boolean.h"
#include "java/lang/Double.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

@implementation FFTViewBehaviorImage

- (id)initWithFFTKeyValueList:(id<FFTKeyValueList>)properties {
  if (self = [super initWithNSString:FFTViewBehavior_get_image_() withFFTKeyValueList:properties]) {
    images_ = [[JavaUtilArrayList alloc] init];
    fill_ = NO;
    [self makeImagesWithFFTKeyValueList:properties];
    self->fill_ = [((JavaLangBoolean *) nil_chk([FFTViewBehavior getBooleanPropertyWithNSString:@"fill" withBoolean:NO withFFTKeyValueList:properties])) booleanValue];
    self->align_ = [FFTViewBehavior getStringPropertyWithNSString:@"align" withNSString:@"c" withFFTKeyValueList:properties];
    self->verticalAlign_ = [FFTViewBehavior getStringPropertyWithNSString:@"vertical-align" withNSString:@"m" withFFTKeyValueList:properties];
    self->marginTop_ = [((FFTFluidApp *) nil_chk(FFTGlobalState_get_fluidApp__())) unitsToPixelsWithDouble:[((JavaLangDouble *) nil_chk([FFTViewBehavior getDoublePropertyWithNSString:@"margin-top" withJavaLangDouble:[JavaLangDouble valueOfWithDouble:0.0] withFFTKeyValueList:properties])) doubleValue]];
    self->maxWidth_ = [FFTViewBehavior getSizePropertyWithNSString:@"image-max-width" withNSString:nil withFFTKeyValueList:properties];
    self->maxHeight_ = [FFTViewBehavior getSizePropertyWithNSString:@"image-max-height" withNSString:nil withFFTKeyValueList:properties];
  }
  return self;
}

- (void)makeImagesWithFFTKeyValueList:(id<FFTKeyValueList>)properties {
  for (id<FFTKeyValueList> __strong imageKvl in nil_chk([((id<FFTKeyValueList>) nil_chk(properties)) getWithNSString:@"image"])) {
    FFTViewBehaviorImage_ImageWithCondition *image = [[FFTViewBehaviorImage_ImageWithCondition alloc] init];
    [((JavaUtilArrayList *) nil_chk(images_)) addWithId:image];
    image->image_ = [((id<FFTKeyValueList>) nil_chk(imageKvl)) getValue];
    if ([imageKvl containsWithNSString:@"condition"]) {
      image->condition_ = [imageKvl getValueWithNSString:@"condition"];
    }
  }
}

- (NSString *)getImageWithWithNSString:(NSString *)dataModelPrefix {
  for (FFTViewBehaviorImage_ImageWithCondition * __strong i in nil_chk(images_)) {
    if (((FFTViewBehaviorImage_ImageWithCondition *) nil_chk(i))->condition_ == nil) {
      return i->image_;
    }
    else if ([((FFTDataModelManager *) nil_chk([((FFTFluidApp *) nil_chk(FFTGlobalState_get_fluidApp__())) getDataModelManager])) checkConditionWithNSString:i->condition_ withNSString:dataModelPrefix]) {
      return i->image_;
    }
  }
  return nil;
}

- (FFTViewBehaviorImage_ImageBounds *)getImageBoundsWithNSString:(NSString *)imageName
                                                      withDouble:(double)boundsWidth
                                                      withDouble:(double)boundsHeight {
  double imageAspectRatio = [((FFTImageManager *) nil_chk([((FFTFluidApp *) nil_chk(FFTGlobalState_get_fluidApp__())) getImageManager])) getImageAspectRatioWithNSString:imageName];
  return [self getImageWithBoundsWithDouble:boundsWidth withDouble:boundsHeight withDouble:imageAspectRatio];
}

- (FFTViewBehaviorImage_ImageBounds *)getImageWithBoundsWithDouble:(double)boundsWidth
                                                        withDouble:(double)boundsHeight
                                                        withDouble:(double)imageAspectRatio {
  double width = boundsWidth;
  double height = boundsHeight;
  height -= [self getMarginTop];
  double boundsAspectRatio = width / height;
  double x = 0;
  double y = 0;
  if (!fill_) {
    if (imageAspectRatio > boundsAspectRatio) {
      height = boundsWidth / imageAspectRatio;
    }
    else {
      width = boundsHeight * imageAspectRatio;
    }
    if (maxWidth_ != nil && width > [maxWidth_ doubleValue]) {
      double ratio = [maxWidth_ doubleValue] / width;
      width *= ratio;
      height *= ratio;
    }
    if (maxHeight_ != nil && height > [maxHeight_ doubleValue]) {
      double ratio = [maxHeight_ doubleValue] / height;
      width *= ratio;
      height *= ratio;
    }
    NSString *align = [self getAlign];
    if ([((NSString *) nil_chk(align)) equalsIgnoreCase:@"left"]) {
      x = 0;
    }
    else if ([align equalsIgnoreCase:@"right"]) {
      x = boundsWidth - width;
    }
    else {
      x = (boundsWidth - width) / 2;
    }
    NSString *vAlign = [self getVerticalAlign];
    if ([((NSString *) nil_chk(vAlign)) equalsIgnoreCase:@"top"]) {
      y = 0;
    }
    else if ([vAlign equalsIgnoreCase:@"bottom"]) {
      y = boundsHeight - height;
    }
    else {
      y = (boundsHeight - height) / 2;
    }
    y += [self getMarginTop];
  }
  return [[FFTViewBehaviorImage_ImageBounds alloc] initWithInt:J2ObjCFpToInt(x) withInt:J2ObjCFpToInt(y) withInt:J2ObjCFpToInt(width) withInt:J2ObjCFpToInt(height)];
}

- (NSString *)description {
  return [NSString stringWithFormat:@"ViewBehaviorImage(images=%@, fill=%@, align=%@, verticalAlign=%@, marginTop=%f, maxWidth=%@, maxHeight=%@)", [self getImages], [JavaLangBoolean toStringWithBoolean:[self isFill]], [self getAlign], [self getVerticalAlign], [self getMarginTop], [self getMaxWidth], [self getMaxHeight]];
}

- (JavaUtilArrayList *)getImages {
  return self->images_;
}

- (BOOL)isFill {
  return self->fill_;
}

- (NSString *)getAlign {
  return self->align_;
}

- (NSString *)getVerticalAlign {
  return self->verticalAlign_;
}

- (double)getMarginTop {
  return self->marginTop_;
}

- (JavaLangDouble *)getMaxWidth {
  return self->maxWidth_;
}

- (JavaLangDouble *)getMaxHeight {
  return self->maxHeight_;
}

- (void)setImagesWithJavaUtilArrayList:(JavaUtilArrayList *)images {
  self->images_ = images;
}

- (void)setFillWithBoolean:(BOOL)fill {
  self->fill_ = fill;
}

- (void)setAlignWithNSString:(NSString *)align {
  self->align_ = align;
}

- (void)setVerticalAlignWithNSString:(NSString *)verticalAlign {
  self->verticalAlign_ = verticalAlign;
}

- (void)setMarginTopWithDouble:(double)marginTop {
  self->marginTop_ = marginTop;
}

- (void)setMaxWidthWithJavaLangDouble:(JavaLangDouble *)maxWidth {
  self->maxWidth_ = maxWidth;
}

- (void)setMaxHeightWithJavaLangDouble:(JavaLangDouble *)maxHeight {
  self->maxHeight_ = maxHeight;
}

- (void)copyAllFieldsTo:(FFTViewBehaviorImage *)other {
  [super copyAllFieldsTo:other];
  other->align_ = align_;
  other->fill_ = fill_;
  other->images_ = images_;
  other->marginTop_ = marginTop_;
  other->maxHeight_ = maxHeight_;
  other->maxWidth_ = maxWidth_;
  other->verticalAlign_ = verticalAlign_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithFFTKeyValueList:", "ViewBehaviorImage", NULL, 0x1, NULL },
    { "makeImagesWithFFTKeyValueList:", "makeImages", "V", 0x2, NULL },
    { "getImageWithWithNSString:", "getImageWith", "Ljava.lang.String;", 0x1, NULL },
    { "getImageBoundsWithNSString:withDouble:withDouble:", "getImageBounds", "Lcom.sponberg.fluid.layout.ViewBehaviorImage$ImageBounds;", 0x1, NULL },
    { "getImageWithBoundsWithDouble:withDouble:withDouble:", "getImageWithBounds", "Lcom.sponberg.fluid.layout.ViewBehaviorImage$ImageBounds;", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "getImages", NULL, "Ljava.util.ArrayList;", 0x1, NULL },
    { "isFill", NULL, "Z", 0x1, NULL },
    { "getAlign", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "getVerticalAlign", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "getMarginTop", NULL, "D", 0x1, NULL },
    { "getMaxWidth", NULL, "Ljava.lang.Double;", 0x1, NULL },
    { "getMaxHeight", NULL, "Ljava.lang.Double;", 0x1, NULL },
    { "setImagesWithJavaUtilArrayList:", "setImages", "V", 0x1, NULL },
    { "setFillWithBoolean:", "setFill", "V", 0x1, NULL },
    { "setAlignWithNSString:", "setAlign", "V", 0x1, NULL },
    { "setVerticalAlignWithNSString:", "setVerticalAlign", "V", 0x1, NULL },
    { "setMarginTopWithDouble:", "setMarginTop", "V", 0x1, NULL },
    { "setMaxWidthWithJavaLangDouble:", "setMaxWidth", "V", 0x1, NULL },
    { "setMaxHeightWithJavaLangDouble:", "setMaxHeight", "V", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "images_", NULL, 0x2, "Ljava.util.ArrayList;", NULL,  },
    { "fill_", NULL, 0x2, "Z", NULL,  },
    { "align_", NULL, 0x2, "Ljava.lang.String;", NULL,  },
    { "verticalAlign_", NULL, 0x2, "Ljava.lang.String;", NULL,  },
    { "marginTop_", NULL, 0x2, "D", NULL,  },
    { "maxWidth_", NULL, 0x2, "Ljava.lang.Double;", NULL,  },
    { "maxHeight_", NULL, 0x2, "Ljava.lang.Double;", NULL,  },
  };
  static J2ObjcClassInfo _FFTViewBehaviorImage = { "ViewBehaviorImage", "com.sponberg.fluid.layout", NULL, 0x1, 20, methods, 7, fields, 0, NULL};
  return &_FFTViewBehaviorImage;
}

@end

@implementation FFTViewBehaviorImage_ImageWithCondition

- (NSString *)getImage {
  return self->image_;
}

- (NSString *)getCondition {
  return self->condition_;
}

- (id)init {
  return [super init];
}

- (void)copyAllFieldsTo:(FFTViewBehaviorImage_ImageWithCondition *)other {
  [super copyAllFieldsTo:other];
  other->condition_ = condition_;
  other->image_ = image_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "getImage", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "getCondition", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "init", NULL, NULL, 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "image_", NULL, 0x0, "Ljava.lang.String;", NULL,  },
    { "condition_", NULL, 0x0, "Ljava.lang.String;", NULL,  },
  };
  static J2ObjcClassInfo _FFTViewBehaviorImage_ImageWithCondition = { "ImageWithCondition", "com.sponberg.fluid.layout", "ViewBehaviorImage", 0x9, 3, methods, 2, fields, 0, NULL};
  return &_FFTViewBehaviorImage_ImageWithCondition;
}

@end

@implementation FFTViewBehaviorImage_ImageBounds

- (id)initWithInt:(int)x
          withInt:(int)y
          withInt:(int)width
          withInt:(int)height {
  if (self = [super init]) {
    self->x_ = x;
    self->y_ = y;
    self->width_ = width;
    self->height_ = height;
  }
  return self;
}

- (int)getX {
  return self->x_;
}

- (int)getY {
  return self->y_;
}

- (int)getWidth {
  return self->width_;
}

- (int)getHeight {
  return self->height_;
}

- (NSString *)description {
  return [NSString stringWithFormat:@"ViewBehaviorImage.ImageBounds(x=%d, y=%d, width=%d, height=%d)", [self getX], [self getY], [self getWidth], [self getHeight]];
}

- (void)copyAllFieldsTo:(FFTViewBehaviorImage_ImageBounds *)other {
  [super copyAllFieldsTo:other];
  other->height_ = height_;
  other->width_ = width_;
  other->x_ = x_;
  other->y_ = y_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithInt:withInt:withInt:withInt:", "ImageBounds", NULL, 0x1, NULL },
    { "getX", NULL, "I", 0x1, NULL },
    { "getY", NULL, "I", 0x1, NULL },
    { "getWidth", NULL, "I", 0x1, NULL },
    { "getHeight", NULL, "I", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "x_", NULL, 0x10, "I", NULL,  },
    { "y_", NULL, 0x10, "I", NULL,  },
    { "width_", NULL, 0x10, "I", NULL,  },
    { "height_", NULL, 0x10, "I", NULL,  },
  };
  static J2ObjcClassInfo _FFTViewBehaviorImage_ImageBounds = { "ImageBounds", "com.sponberg.fluid.layout", "ViewBehaviorImage", 0x9, 6, methods, 4, fields, 0, NULL};
  return &_FFTViewBehaviorImage_ImageBounds;
}

@end
