//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src-delomboked/com/sponberg/fluid/layout/ViewBehaviorWebView.java
//

#include "IOSClass.h"
#include "com/sponberg/fluid/FluidApp.h"
#include "com/sponberg/fluid/GlobalState.h"
#include "com/sponberg/fluid/ResourceService.h"
#include "com/sponberg/fluid/layout/ViewBehavior.h"
#include "com/sponberg/fluid/layout/ViewBehaviorWebView.h"
#include "com/sponberg/fluid/util/KeyValueList.h"
#include "java/io/BufferedReader.h"
#include "java/io/IOException.h"
#include "java/io/StringReader.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"

BOOL FFTViewBehaviorWebView_initialized = NO;

@implementation FFTViewBehaviorWebView

BOOL FFTViewBehaviorWebView_useCache_ = YES;
JavaUtilArrayList * FFTViewBehaviorWebView_topSection_;
JavaUtilArrayList * FFTViewBehaviorWebView_bottomSection_;
JavaUtilHashMap * FFTViewBehaviorWebView_cachedResources_;

+ (void)preloadAssets {
  if (FFTViewBehaviorWebView_useCache_) {
    (void) [FFTViewBehaviorWebView getFileWithNSString:@"jquery-2.1.0.min.js"];
    (void) [FFTViewBehaviorWebView getFileWithNSString:@"fastclick.js"];
    (void) [FFTViewBehaviorWebView getFileWithNSString:@"fluid.js"];
    (void) [FFTViewBehaviorWebView getFileWithNSString:@"html5-doctor-reset-stylesheet.css"];
    (void) [FFTViewBehaviorWebView getFileWithNSString:@"lesswebby.css"];
  }
}

- (id)initWithFFTKeyValueList:(id<FFTKeyValueList>)properties {
  if (self = [super initWithNSString:FFTViewBehavior_get_webview_() withFFTKeyValueList:properties]) {
    if (![((id<FFTKeyValueList>) nil_chk(properties)) containsWithNSString:@"html"]) {
      @throw [[JavaLangRuntimeException alloc] initWithNSString:@"WebView must contain 'html' that references the html file for the view"];
    }
    self->internalHtml_ = [FFTViewBehaviorWebView generateInternalHtmlWithNSString:[FFTViewBehavior getStringPropertyWithNSString:@"html" withNSString:nil withFFTKeyValueList:properties]];
  }
  return self;
}

- (NSString *)getHtml {
  JavaLangStringBuilder *buf = [[JavaLangStringBuilder alloc] init];
  for (id<FFTViewBehaviorWebView_FilePart> __strong p in nil_chk(FFTViewBehaviorWebView_topSection_)) {
    (void) [buf appendWithNSString:[((id<FFTViewBehaviorWebView_FilePart>) nil_chk(p)) getHtml]];
  }
  for (id<FFTViewBehaviorWebView_FilePart> __strong p in nil_chk(internalHtml_)) {
    (void) [buf appendWithNSString:[((id<FFTViewBehaviorWebView_FilePart>) nil_chk(p)) getHtml]];
  }
  for (id<FFTViewBehaviorWebView_FilePart> __strong p in nil_chk(FFTViewBehaviorWebView_bottomSection_)) {
    (void) [buf appendWithNSString:[((id<FFTViewBehaviorWebView_FilePart>) nil_chk(p)) getHtml]];
  }
  return [buf description];
}

+ (JavaUtilArrayList *)generateTopSection {
  JavaUtilArrayList *list = [[JavaUtilArrayList alloc] init];
  JavaLangStringBuilder *buf = [[JavaLangStringBuilder alloc] init];
  (void) [buf appendWithNSString:@"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">"];
  (void) [buf appendWithNSString:@"<html>"];
  (void) [buf appendWithNSString:@"<head>"];
  (void) [buf appendWithNSString:@"<title>Fluid View</title>"];
  (void) [buf appendWithNSString:@"<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, user-scalable=no\"></meta>"];
  if (FFTViewBehaviorWebView_useInline) {
    (void) [buf appendWithNSString:@"<script type=\"text/javascript\">"];
    [list addWithId:[[FFTViewBehaviorWebView_StringFilePart alloc] initWithNSString:[buf description]]];
    buf = [[JavaLangStringBuilder alloc] init];
    [list addWithId:[[FFTViewBehaviorWebView_InlineResourceFilePart alloc] initWithNSString:@"jquery-2.1.0.min.js"]];
    [list addWithId:[[FFTViewBehaviorWebView_InlineResourceFilePart alloc] initWithNSString:@"fastclick.js"]];
    [list addWithId:[[FFTViewBehaviorWebView_InlineResourceFilePart alloc] initWithNSString:@"fluid.js"]];
    (void) [buf appendWithNSString:@"</script>"];
  }
  else {
    (void) [buf appendWithNSString:@"<script type=\"text/javascript\" src=\"fluid://load/jquery-2.1.0.min.js\"></script>"];
    (void) [buf appendWithNSString:@"<script type=\"text/javascript\" src=\"fluid://load/fastclick.js\"></script>"];
    (void) [buf appendWithNSString:@"<script type=\"text/javascript\" src=\"fluid://load/fluid.js\"></script>"];
  }
  if (FFTViewBehaviorWebView_useInline) {
    (void) [buf appendWithNSString:@"<style type=\"text/css\">"];
    [list addWithId:[[FFTViewBehaviorWebView_StringFilePart alloc] initWithNSString:[buf description]]];
    buf = [[JavaLangStringBuilder alloc] init];
    [list addWithId:[[FFTViewBehaviorWebView_InlineResourceFilePart alloc] initWithNSString:@"html5-doctor-reset-stylesheet.css"]];
    [list addWithId:[[FFTViewBehaviorWebView_InlineResourceFilePart alloc] initWithNSString:@"lesswebby.css"]];
    (void) [buf appendWithNSString:@"</style>"];
  }
  else {
    (void) [buf appendWithNSString:@"<link rel=\"stylesheet\" type=\"text/css\" href=\"fluid://load/html5-doctor-reset-stylesheet.css\">"];
    (void) [buf appendWithNSString:@"<link rel=\"stylesheet\" type=\"text/css\" href=\"fluid://load/lesswebby.css\">"];
  }
  (void) [buf appendWithNSString:@"</head>"];
  (void) [buf appendWithNSString:@"<body>"];
  [list addWithId:[[FFTViewBehaviorWebView_StringFilePart alloc] initWithNSString:[buf description]]];
  return list;
}

+ (JavaUtilArrayList *)generateBottomSection {
  JavaUtilArrayList *list = [[JavaUtilArrayList alloc] init];
  JavaLangStringBuilder *buf = [[JavaLangStringBuilder alloc] init];
  (void) [buf appendWithNSString:@"</body>"];
  (void) [buf appendWithNSString:@"</html>"];
  [list addWithId:[[FFTViewBehaviorWebView_StringFilePart alloc] initWithNSString:[buf description]]];
  return list;
}

+ (JavaUtilArrayList *)generateInternalHtmlWithNSString:(NSString *)fileName {
  NSString *html = [((id<FFTResourceService>) nil_chk([((FFTFluidApp *) nil_chk(FFTGlobalState_get_fluidApp__())) getResourceService])) getResourceAsStringWithNSString:@"webview" withNSString:[NSString stringWithFormat:@"%@.html", fileName]];
  if (FFTViewBehaviorWebView_useInline) {
    @try {
      return [FFTViewBehaviorWebView generateHtmlInlineResourcesWithNSString:html];
    }
    @catch (JavaIoIOException *e) {
      [((JavaIoIOException *) nil_chk(e)) printStackTrace];
      return [[JavaUtilArrayList alloc] init];
    }
  }
  else {
    JavaUtilArrayList *list = [[JavaUtilArrayList alloc] init];
    [list addWithId:[[FFTViewBehaviorWebView_StringFilePart alloc] initWithNSString:html]];
    return list;
  }
}

+ (JavaUtilArrayList *)generateHtmlInlineResourcesWithNSString:(NSString *)html {
  JavaUtilArrayList *internalHtml = [[JavaUtilArrayList alloc] init];
  JavaLangStringBuilder *buf = [[JavaLangStringBuilder alloc] init];
  JavaIoBufferedReader *in = [[JavaIoBufferedReader alloc] initWithJavaIoReader:[[JavaIoStringReader alloc] initWithNSString:html]];
  NSString *line;
  while ((line = [in readLine]) != nil) {
    BOOL finishedWithLine;
    do {
      finishedWithLine = YES;
      int i = [((NSString *) nil_chk(line)) indexOfString:@"<script"];
      if (i != -1) {
        int i2 = [line indexOfString:@">" fromIndex:i];
        int i3 = [line indexOfString:@"src=" fromIndex:i];
        if (i3 != -1 && i3 < i2) {
          int i4 = [line indexOfString:@"\"" fromIndex:i3];
          int i5 = [line indexOfString:@"\"" fromIndex:i4 + 1];
          NSString *filename = [((NSString *) nil_chk([line substring:i4 + 1 endIndex:i5])) trim];
          (void) [buf appendWithNSString:[line substring:0 endIndex:i]];
          (void) [buf appendWithNSString:@"<script>"];
          [internalHtml addWithId:[[FFTViewBehaviorWebView_StringFilePart alloc] initWithNSString:[buf description]]];
          buf = [[JavaLangStringBuilder alloc] init];
          (void) [buf appendWithNSString:@"</script>"];
          NSString *resource = [FFTViewBehaviorWebView getFileWithNSString:filename];
          if (resource == nil) {
            @throw [[JavaLangRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"Unable to find file %@", filename]];
          }
          [internalHtml addWithId:[[FFTViewBehaviorWebView_InlineResourceFilePart alloc] initWithNSString:filename]];
          int i6 = [line indexOfString:@"</script>" fromIndex:i5];
          if (i6 == -1) {
            @throw [[JavaLangRuntimeException alloc] initWithNSString:@"Expected </script>"];
          }
          line = [line substring:i6 + 9];
          finishedWithLine = NO;
        }
      }
    }
    while (!finishedWithLine);
    (void) [buf appendWithNSString:[NSString stringWithFormat:@"%@\n", line]];
  }
  if ([buf sequenceLength] > 0) {
    [internalHtml addWithId:[[FFTViewBehaviorWebView_StringFilePart alloc] initWithNSString:[buf description]]];
  }
  return internalHtml;
}

+ (NSString *)getFileWithNSString:(NSString *)name {
  if (!([((NSString *) nil_chk(name)) hasSuffix:@".js"] || [name hasSuffix:@".css"])) {
    return nil;
  }
  if (FFTViewBehaviorWebView_useCache_) {
    NSString *data = [((JavaUtilHashMap *) nil_chk(FFTViewBehaviorWebView_cachedResources_)) getWithId:name];
    if (data != nil) {
      return data;
    }
  }
  NSString *resource = [((id<FFTResourceService>) nil_chk([((FFTFluidApp *) nil_chk(FFTGlobalState_get_fluidApp__())) getResourceService])) getResourceAsStringWithNSString:@"webview" withNSString:name];
  if (FFTViewBehaviorWebView_useCache_) {
    (void) [((JavaUtilHashMap *) nil_chk(FFTViewBehaviorWebView_cachedResources_)) putWithId:name withId:resource];
  }
  return resource;
}

- (NSString *)description {
  return [NSString stringWithFormat:@"ViewBehaviorWebView(internalHtml=%@)", [self getInternalHtml]];
}

- (JavaUtilArrayList *)getInternalHtml {
  return self->internalHtml_;
}

- (void)setInternalHtmlWithJavaUtilArrayList:(JavaUtilArrayList *)internalHtml {
  self->internalHtml_ = internalHtml;
}

+ (void)initialize {
  if (self == [FFTViewBehaviorWebView class]) {
    FFTViewBehaviorWebView_cachedResources_ = [[JavaUtilHashMap alloc] init];
    {
      FFTViewBehaviorWebView_topSection_ = [FFTViewBehaviorWebView generateTopSection];
      FFTViewBehaviorWebView_bottomSection_ = [FFTViewBehaviorWebView generateBottomSection];
      [FFTViewBehaviorWebView preloadAssets];
    }
    FFTViewBehaviorWebView_initialized = YES;
  }
}

- (void)copyAllFieldsTo:(FFTViewBehaviorWebView *)other {
  [super copyAllFieldsTo:other];
  other->internalHtml_ = internalHtml_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "preloadAssets", NULL, "V", 0x8, NULL },
    { "initWithFFTKeyValueList:", "ViewBehaviorWebView", NULL, 0x1, NULL },
    { "getHtml", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "generateTopSection", NULL, "Ljava.util.ArrayList;", 0xa, NULL },
    { "generateBottomSection", NULL, "Ljava.util.ArrayList;", 0xa, NULL },
    { "generateInternalHtmlWithNSString:", "generateInternalHtml", "Ljava.util.ArrayList;", 0xa, NULL },
    { "generateHtmlInlineResourcesWithNSString:", "generateHtmlInlineResources", "Ljava.util.ArrayList;", 0xa, "Ljava.io.IOException;" },
    { "getFileWithNSString:", "getFile", "Ljava.lang.String;", 0x9, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "getInternalHtml", NULL, "Ljava.util.ArrayList;", 0x1, NULL },
    { "setInternalHtmlWithJavaUtilArrayList:", "setInternalHtml", "V", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "internalHtml_", NULL, 0x2, "Ljava.util.ArrayList;", NULL,  },
    { "useInline_", NULL, 0x18, "Z", NULL, .constantValue.asBOOL = FFTViewBehaviorWebView_useInline },
    { "useCache_", NULL, 0x8, "Z", &FFTViewBehaviorWebView_useCache_,  },
    { "topSection_", NULL, 0xa, "Ljava.util.ArrayList;", &FFTViewBehaviorWebView_topSection_,  },
    { "bottomSection_", NULL, 0xa, "Ljava.util.ArrayList;", &FFTViewBehaviorWebView_bottomSection_,  },
    { "cachedResources_", NULL, 0xa, "Ljava.util.HashMap;", &FFTViewBehaviorWebView_cachedResources_,  },
  };
  static J2ObjcClassInfo _FFTViewBehaviorWebView = { "ViewBehaviorWebView", "com.sponberg.fluid.layout", NULL, 0x1, 11, methods, 6, fields, 0, NULL};
  return &_FFTViewBehaviorWebView;
}

@end

@interface FFTViewBehaviorWebView_FilePart : NSObject
@end

@implementation FFTViewBehaviorWebView_FilePart

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "getHtml", NULL, "Ljava.lang.String;", 0x401, NULL },
  };
  static J2ObjcClassInfo _FFTViewBehaviorWebView_FilePart = { "FilePart", "com.sponberg.fluid.layout", "ViewBehaviorWebView", 0x208, 1, methods, 0, NULL, 0, NULL};
  return &_FFTViewBehaviorWebView_FilePart;
}

@end

@implementation FFTViewBehaviorWebView_StringFilePart

- (id)initWithNSString:(NSString *)html {
  if (self = [super init]) {
    self->html_ = html;
  }
  return self;
}

- (NSString *)getHtml {
  return html_;
}

- (void)copyAllFieldsTo:(FFTViewBehaviorWebView_StringFilePart *)other {
  [super copyAllFieldsTo:other];
  other->html_ = html_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithNSString:", "StringFilePart", NULL, 0x1, NULL },
    { "getHtml", NULL, "Ljava.lang.String;", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "html_", NULL, 0x10, "Ljava.lang.String;", NULL,  },
  };
  static J2ObjcClassInfo _FFTViewBehaviorWebView_StringFilePart = { "StringFilePart", "com.sponberg.fluid.layout", "ViewBehaviorWebView", 0x8, 2, methods, 1, fields, 0, NULL};
  return &_FFTViewBehaviorWebView_StringFilePart;
}

@end

@implementation FFTViewBehaviorWebView_InlineResourceFilePart

- (id)initWithNSString:(NSString *)key {
  if (self = [super init]) {
    self->key_ = key;
    if (FFTViewBehaviorWebView_get_useCache_()) {
      if (![((JavaUtilHashMap *) nil_chk(FFTViewBehaviorWebView_get_cachedResources_())) containsKeyWithId:key]) {
        (void) [FFTViewBehaviorWebView getFileWithNSString:key];
      }
    }
  }
  return self;
}

- (NSString *)getHtml {
  NSString *html = [((JavaUtilHashMap *) nil_chk(FFTViewBehaviorWebView_get_cachedResources_())) getWithId:key_];
  return html;
}

- (void)copyAllFieldsTo:(FFTViewBehaviorWebView_InlineResourceFilePart *)other {
  [super copyAllFieldsTo:other];
  other->key_ = key_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithNSString:", "InlineResourceFilePart", NULL, 0x1, NULL },
    { "getHtml", NULL, "Ljava.lang.String;", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "key_", NULL, 0x10, "Ljava.lang.String;", NULL,  },
  };
  static J2ObjcClassInfo _FFTViewBehaviorWebView_InlineResourceFilePart = { "InlineResourceFilePart", "com.sponberg.fluid.layout", "ViewBehaviorWebView", 0x8, 2, methods, 1, fields, 0, NULL};
  return &_FFTViewBehaviorWebView_InlineResourceFilePart;
}

@end
