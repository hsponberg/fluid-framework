//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src-delomboked/com/sponberg/fluid/initializer/LoggingInitializer.java
//

#include "IOSObjectArray.h"
#include "com/sponberg/fluid/FluidApp.h"
#include "com/sponberg/fluid/initializer/LoggingInitializer.h"
#include "com/sponberg/fluid/util/KVLReader.h"
#include "com/sponberg/fluid/util/KeyValueList.h"
#include "com/sponberg/fluid/util/Logger.h"
#include "java/lang/RuntimeException.h"
#include "java/util/List.h"

@implementation FFTLoggingInitializer

- (void)initialize__WithFFTFluidApp:(FFTFluidApp *)app {
  id<FFTKeyValueList> kvl = [((id<JavaUtilList>) nil_chk([((FFTKVLReader *) nil_chk([((FFTFluidApp *) nil_chk(app)) getSettings])) getWithNSString:@"logging"])) getWithInt:0];
  if (![((NSString *) nil_chk([((id<FFTKeyValueList>) nil_chk(kvl)) getValue])) isEqual:@"settings"]) {
    @throw [[JavaLangRuntimeException alloc] initWithNSString:@"Invalid settings under logging"];
  }
  NSString *dateTimeFormat = [kvl getValueWithNSString:@"date-time-format"];
  [FFTLogger setDateFormatWithNSString:dateTimeFormat];
  NSString *level = [kvl getValueWithNSString:@"level"];
  if ([((NSString *) nil_chk(level)) equalsIgnoreCase:@"debug"]) {
    [FFTLogger setLoggingLevelWithInt:FFTLogger_LEVEL_DEBUG];
  }
  else if ([level equalsIgnoreCase:@"info"]) {
    [FFTLogger setLoggingLevelWithInt:FFTLogger_LEVEL_INFO];
  }
  else if ([level equalsIgnoreCase:@"warn"]) {
    [FFTLogger setLoggingLevelWithInt:FFTLogger_LEVEL_WARN];
  }
  else if ([level equalsIgnoreCase:@"error"]) {
    [FFTLogger setLoggingLevelWithInt:FFTLogger_LEVEL_ERROR];
  }
  else if ([level equalsIgnoreCase:@"none"]) {
    [FFTLogger setLoggingLevelWithInt:FFTLogger_LEVEL_NONE];
  }
  else {
    @throw [[JavaLangRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"Invalid logging level %@", level]];
  }
  if ([kvl containsWithNSString:@"includeClassName"]) {
    [FFTLogger setIncludeClassNameWithBoolean:[((NSString *) nil_chk([kvl getValueWithNSString:@"includeClassName"])) equalsIgnoreCase:@"true"]];
  }
  if ([kvl containsWithNSString:@"fullPackageName"]) {
    [FFTLogger setFullPackageNameWithBoolean:[((NSString *) nil_chk([kvl getValueWithNSString:@"fullPackageName"])) equalsIgnoreCase:@"true"]];
  }
  if ([kvl containsWithNSString:@"includeMethodName"]) {
    [FFTLogger setIncludeMethodNameWithBoolean:[((NSString *) nil_chk([kvl getValueWithNSString:@"includeMethodName"])) equalsIgnoreCase:@"true"]];
  }
  if ([kvl containsWithNSString:@"includeLineNumber"]) {
    [FFTLogger setIncludeLineNumberWithBoolean:[((NSString *) nil_chk([kvl getValueWithNSString:@"includeLineNumber"])) equalsIgnoreCase:@"true"]];
  }
  [FFTLogger setEnabledWithBoolean:YES];
}

- (IOSObjectArray *)getSupportedPlatforms {
  return nil;
}

- (id)init {
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initialize__WithFFTFluidApp:", "initialize", "V", 0x1, NULL },
    { "getSupportedPlatforms", NULL, "[Ljava.lang.String;", 0x1, NULL },
    { "init", NULL, NULL, 0x1, NULL },
  };
  static J2ObjcClassInfo _FFTLoggingInitializer = { "LoggingInitializer", "com.sponberg.fluid.initializer", NULL, 0x1, 3, methods, 0, NULL, 0, NULL};
  return &_FFTLoggingInitializer;
}

@end
