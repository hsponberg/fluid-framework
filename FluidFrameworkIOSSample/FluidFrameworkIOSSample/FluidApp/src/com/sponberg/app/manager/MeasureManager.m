//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src-delomboked/com/sponberg/app/manager/MeasureManager.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/eclipsesource/json/JsonArray.h"
#include "com/eclipsesource/json/JsonObject.h"
#include "com/sponberg/app/manager/MeasureManager.h"
#include "com/sponberg/fluid/FluidApp.h"
#include "com/sponberg/fluid/GlobalState.h"
#include "com/sponberg/fluid/SystemService.h"
#include "com/sponberg/fluid/layout/DataModelManager.h"
#include "com/sponberg/fluid/util/JsonUtil.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/Runnable.h"
#include "java/util/ArrayList.h"
#include "java/util/concurrent/Executors.h"
#include "java/util/concurrent/ScheduledExecutorService.h"
#include "java/util/concurrent/ScheduledFuture.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/locks/ReentrantReadWriteLock.h"

@implementation FAMeasureManager

- (void)startMeasurement {
  if (service_ != nil) {
    [service_ shutdown];
  }
  service_ = [JavaUtilConcurrentExecutors newSingleThreadScheduledExecutor];
  list1_ = [[JavaUtilArrayList alloc] init];
  x_ = 0;
  total_ = 0;
  mean_ = nil;
  actual_ = nil;
  measureProgress_ = 0;
  [((FFTDataModelManager *) nil_chk([((FFTFluidApp *) nil_chk(FFTGlobalState_get_fluidApp__())) getDataModelManager])) dataDidChangeWithNSString:@"app.measureManager" withNSStringArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSString class]]]];
  id<JavaLangRunnable> r = [[FAMeasureManager_$1 alloc] initWithFAMeasureManager:self];
  int period = durationInSeconds_ * 1000 / numPointsToCollect_;
  (void) [((id<JavaUtilConcurrentScheduledExecutorService>) nil_chk(service_)) scheduleAtFixedRateWithJavaLangRunnable:r withLong:initialDelayMillis_ withLong:period withJavaUtilConcurrentTimeUnitEnum:JavaUtilConcurrentTimeUnitEnum_get_MILLISECONDS()];
}

- (double)getCurrentValue {
  return 7 + [JavaLangMath sinWithDouble:x_];
}

- (int)getNumPoints {
  [((JavaUtilConcurrentLocksReentrantReadWriteLock_ReadLock *) nil_chk(readLock_)) lock];
  @try {
    return [((JavaUtilArrayList *) nil_chk(list1_)) size];
  }
  @finally {
    [readLock_ unlock];
  }
}

- (JavaLangDouble *)getMean {
  return mean_;
}

- (JavaLangDouble *)getActual {
  return actual_;
}

- (JavaLangInteger *)getMeasureProgress {
  return [JavaLangInteger valueOfWithInt:measureProgress_];
}

- (NSString *)getGraphData {
  @try {
    [((JavaUtilConcurrentLocksReentrantReadWriteLock_ReadLock *) nil_chk(readLock_)) lock];
    JavaUtilArrayList *list2 = [[JavaUtilArrayList alloc] init];
    if (mean_ != nil) {
      [list2 addWithId:[[FAMeasureManager_Point alloc] initWithDouble:0 withDouble:[mean_ doubleValue]]];
      [list2 addWithId:[[FAMeasureManager_Point alloc] initWithDouble:((FAMeasureManager_Point *) nil_chk([((JavaUtilArrayList *) nil_chk(list1_)) getWithInt:[self getNumPoints] - 1]))->x_ withDouble:[mean_ doubleValue]]];
    }
    double xMax = numPointsToCollect_ * xStep_ - xStep_;
    FFTJsonObject *json = [[FFTJsonObject alloc] init];
    (void) [json addWithNSString:@"plotActual" withFFTJsonValue:[FFTJsonUtil listToJsonArrayWithJavaUtilList:list1_]];
    (void) [json addWithNSString:@"plotMean" withFFTJsonValue:[FFTJsonUtil listToJsonArrayWithJavaUtilList:list2]];
    (void) [json addWithNSString:@"xMax" withDouble:xMax];
    return [json description];
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    return nil;
  }
  @finally {
    [((JavaUtilConcurrentLocksReentrantReadWriteLock_ReadLock *) nil_chk(readLock_)) unlock];
  }
}

- (int)getNumPointsToCollect {
  return self->numPointsToCollect_;
}

- (int)getDurationInSeconds {
  return self->durationInSeconds_;
}

- (int)getInitialDelayMillis {
  return self->initialDelayMillis_;
}

- (JavaUtilArrayList *)getList1 {
  return self->list1_;
}

- (double)getX {
  return self->x_;
}

- (double)getXStep {
  return self->xStep_;
}

- (double)getTotal {
  return self->total_;
}

- (id<JavaUtilConcurrentScheduledExecutorService>)getService {
  return self->service_;
}

- (JavaUtilConcurrentLocksReentrantReadWriteLock *)getLock {
  return self->lock_;
}

- (JavaUtilConcurrentLocksReentrantReadWriteLock_WriteLock *)getWriteLock {
  return self->writeLock_;
}

- (JavaUtilConcurrentLocksReentrantReadWriteLock_ReadLock *)getReadLock {
  return self->readLock_;
}

- (void)setNumPointsToCollectWithInt:(int)numPointsToCollect {
  self->numPointsToCollect_ = numPointsToCollect;
}

- (void)setDurationInSecondsWithInt:(int)durationInSeconds {
  self->durationInSeconds_ = durationInSeconds;
}

- (void)setInitialDelayMillisWithInt:(int)initialDelayMillis {
  self->initialDelayMillis_ = initialDelayMillis;
}

- (void)setMeasureProgressWithInt:(int)measureProgress {
  self->measureProgress_ = measureProgress;
}

- (void)setMeanWithJavaLangDouble:(JavaLangDouble *)mean {
  self->mean_ = mean;
}

- (void)setActualWithJavaLangDouble:(JavaLangDouble *)actual {
  self->actual_ = actual;
}

- (void)setList1WithJavaUtilArrayList:(JavaUtilArrayList *)list1 {
  self->list1_ = list1;
}

- (void)setXWithDouble:(double)x {
  self->x_ = x;
}

- (void)setTotalWithDouble:(double)total {
  self->total_ = total;
}

- (void)setServiceWithJavaUtilConcurrentScheduledExecutorService:(id<JavaUtilConcurrentScheduledExecutorService>)service {
  self->service_ = service;
}

- (void)setLockWithJavaUtilConcurrentLocksReentrantReadWriteLock:(JavaUtilConcurrentLocksReentrantReadWriteLock *)lock {
  self->lock_ = lock;
}

- (void)setWriteLockWithJavaUtilConcurrentLocksReentrantReadWriteLock_WriteLock:(JavaUtilConcurrentLocksReentrantReadWriteLock_WriteLock *)writeLock {
  self->writeLock_ = writeLock;
}

- (void)setReadLockWithJavaUtilConcurrentLocksReentrantReadWriteLock_ReadLock:(JavaUtilConcurrentLocksReentrantReadWriteLock_ReadLock *)readLock {
  self->readLock_ = readLock;
}

- (id)init {
  if (self = [super init]) {
    numPointsToCollect_ = 50;
    durationInSeconds_ = 4;
    initialDelayMillis_ = 500;
    measureProgress_ = 0;
    mean_ = nil;
    actual_ = nil;
    list1_ = [[JavaUtilArrayList alloc] init];
    x_ = 0;
    xStep_ = 0.15;
    total_ = 0;
    service_ = nil;
    lock_ = [[JavaUtilConcurrentLocksReentrantReadWriteLock alloc] initWithBoolean:YES];
    writeLock_ = [lock_ writeLock];
    readLock_ = [lock_ readLock];
  }
  return self;
}

- (void)copyAllFieldsTo:(FAMeasureManager *)other {
  [super copyAllFieldsTo:other];
  other->actual_ = actual_;
  other->durationInSeconds_ = durationInSeconds_;
  other->initialDelayMillis_ = initialDelayMillis_;
  other->list1_ = list1_;
  other->lock_ = lock_;
  other->mean_ = mean_;
  other->measureProgress_ = measureProgress_;
  other->numPointsToCollect_ = numPointsToCollect_;
  other->readLock_ = readLock_;
  other->service_ = service_;
  other->total_ = total_;
  other->writeLock_ = writeLock_;
  other->x_ = x_;
  other->xStep_ = xStep_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "startMeasurement", NULL, "V", 0x1, NULL },
    { "getCurrentValue", NULL, "D", 0x2, NULL },
    { "getNumPoints", NULL, "I", 0x2, NULL },
    { "getMean", NULL, "Ljava.lang.Double;", 0x1, NULL },
    { "getActual", NULL, "Ljava.lang.Double;", 0x1, NULL },
    { "getMeasureProgress", NULL, "Ljava.lang.Integer;", 0x1, NULL },
    { "getGraphData", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "getNumPointsToCollect", NULL, "I", 0x1, NULL },
    { "getDurationInSeconds", NULL, "I", 0x1, NULL },
    { "getInitialDelayMillis", NULL, "I", 0x1, NULL },
    { "getList1", NULL, "Ljava.util.ArrayList;", 0x1, NULL },
    { "getX", NULL, "D", 0x1, NULL },
    { "getXStep", NULL, "D", 0x1, NULL },
    { "getTotal", NULL, "D", 0x1, NULL },
    { "getService", NULL, "Ljava.util.concurrent.ScheduledExecutorService;", 0x1, NULL },
    { "getLock", NULL, "Ljava.util.concurrent.locks.ReentrantReadWriteLock;", 0x1, NULL },
    { "getWriteLock", NULL, "Ljava.util.concurrent.locks.ReentrantReadWriteLock$WriteLock;", 0x1, NULL },
    { "getReadLock", NULL, "Ljava.util.concurrent.locks.ReentrantReadWriteLock$ReadLock;", 0x1, NULL },
    { "setNumPointsToCollectWithInt:", "setNumPointsToCollect", "V", 0x1, NULL },
    { "setDurationInSecondsWithInt:", "setDurationInSeconds", "V", 0x1, NULL },
    { "setInitialDelayMillisWithInt:", "setInitialDelayMillis", "V", 0x1, NULL },
    { "setMeasureProgressWithInt:", "setMeasureProgress", "V", 0x1, NULL },
    { "setMeanWithJavaLangDouble:", "setMean", "V", 0x1, NULL },
    { "setActualWithJavaLangDouble:", "setActual", "V", 0x1, NULL },
    { "setList1WithJavaUtilArrayList:", "setList1", "V", 0x1, NULL },
    { "setXWithDouble:", "setX", "V", 0x1, NULL },
    { "setTotalWithDouble:", "setTotal", "V", 0x1, NULL },
    { "setServiceWithJavaUtilConcurrentScheduledExecutorService:", "setService", "V", 0x1, NULL },
    { "setLockWithJavaUtilConcurrentLocksReentrantReadWriteLock:", "setLock", "V", 0x1, NULL },
    { "setWriteLockWithJavaUtilConcurrentLocksReentrantReadWriteLock_WriteLock:", "setWriteLock", "V", 0x1, NULL },
    { "setReadLockWithJavaUtilConcurrentLocksReentrantReadWriteLock_ReadLock:", "setReadLock", "V", 0x1, NULL },
    { "init", NULL, NULL, 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "numPointsToCollect_", NULL, 0x0, "I", NULL,  },
    { "durationInSeconds_", NULL, 0x0, "I", NULL,  },
    { "initialDelayMillis_", NULL, 0x0, "I", NULL,  },
    { "measureProgress_", NULL, 0x0, "I", NULL,  },
    { "mean_", NULL, 0x0, "Ljava.lang.Double;", NULL,  },
    { "actual_", NULL, 0x0, "Ljava.lang.Double;", NULL,  },
    { "list1_", NULL, 0x0, "Ljava.util.ArrayList;", NULL,  },
    { "x_", NULL, 0x0, "D", NULL,  },
    { "xStep_", NULL, 0x10, "D", NULL,  },
    { "total_", NULL, 0x0, "D", NULL,  },
    { "service_", NULL, 0x0, "Ljava.util.concurrent.ScheduledExecutorService;", NULL,  },
    { "lock_", NULL, 0x0, "Ljava.util.concurrent.locks.ReentrantReadWriteLock;", NULL,  },
    { "writeLock_", NULL, 0x0, "Ljava.util.concurrent.locks.ReentrantReadWriteLock$WriteLock;", NULL,  },
    { "readLock_", NULL, 0x0, "Ljava.util.concurrent.locks.ReentrantReadWriteLock$ReadLock;", NULL,  },
  };
  static J2ObjcClassInfo _FAMeasureManager = { "MeasureManager", "com.sponberg.app.manager", NULL, 0x1, 32, methods, 14, fields, 0, NULL};
  return &_FAMeasureManager;
}

@end

@implementation FAMeasureManager_Point

- (id)initWithDouble:(double)x
          withDouble:(double)y {
  if (self = [super init]) {
    self->x_ = x;
    self->y_ = y;
  }
  return self;
}

- (JavaLangDouble *)getX {
  return [JavaLangDouble valueOfWithDouble:x_];
}

- (JavaLangDouble *)getY {
  return [JavaLangDouble valueOfWithDouble:y_];
}

- (void)copyAllFieldsTo:(FAMeasureManager_Point *)other {
  [super copyAllFieldsTo:other];
  other->x_ = x_;
  other->y_ = y_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithDouble:withDouble:", "Point", NULL, 0x1, NULL },
    { "getX", NULL, "Ljava.lang.Double;", 0x1, NULL },
    { "getY", NULL, "Ljava.lang.Double;", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "x_", NULL, 0x0, "D", NULL,  },
    { "y_", NULL, 0x0, "D", NULL,  },
  };
  static J2ObjcClassInfo _FAMeasureManager_Point = { "Point", "com.sponberg.app.manager", "MeasureManager", 0x9, 3, methods, 2, fields, 0, NULL};
  return &_FAMeasureManager_Point;
}

@end

@implementation FAMeasureManager_$1

- (void)run {
  this$0_->actual_ = [JavaLangDouble valueOfWithDouble:[this$0_ getCurrentValue]];
  this$0_->measureProgress_ = J2ObjCFpToInt(([this$0_ getNumPoints] * 1.0 / this$0_->numPointsToCollect_ * 100));
  [((JavaUtilConcurrentLocksReentrantReadWriteLock_WriteLock *) nil_chk(this$0_->writeLock_)) lock];
  [((JavaUtilArrayList *) nil_chk(this$0_->list1_)) addWithId:[[FAMeasureManager_Point alloc] initWithDouble:this$0_->x_ withDouble:[this$0_->actual_ doubleValue]]];
  [this$0_->writeLock_ unlock];
  if (this$0_->measureProgress_ == 100) {
    [((id<JavaUtilConcurrentScheduledExecutorService>) nil_chk(this$0_->service_)) shutdown];
  }
  this$0_->x_ += this$0_->xStep_;
  this$0_->total_ += [this$0_->actual_ doubleValue];
  if ([this$0_ getNumPoints] >= this$0_->numPointsToCollect_ / 3) {
    this$0_->mean_ = [JavaLangDouble valueOfWithDouble:this$0_->total_ / [this$0_ getNumPoints]];
  }
  [((id<FFTSystemService>) nil_chk([((FFTFluidApp *) nil_chk(FFTGlobalState_get_fluidApp__())) getSystemService])) runOnUiThreadWithJavaLangRunnable:[[FAMeasureManager_$1_$1 alloc] init]];
}

- (id)initWithFAMeasureManager:(FAMeasureManager *)outer$ {
  this$0_ = outer$;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "run", NULL, "V", 0x1, NULL },
    { "initWithFAMeasureManager:", "init", NULL, 0x0, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lcom.sponberg.app.manager.MeasureManager;", NULL,  },
  };
  static J2ObjcClassInfo _FAMeasureManager_$1 = { "$1", "com.sponberg.app.manager", "MeasureManager", 0x8000, 2, methods, 1, fields, 0, NULL};
  return &_FAMeasureManager_$1;
}

@end

@implementation FAMeasureManager_$1_$1

- (void)run {
  [((FFTDataModelManager *) nil_chk([((FFTFluidApp *) nil_chk(FFTGlobalState_get_fluidApp__())) getDataModelManager])) dataDidChangeWithNSString:@"app.measureManager" withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"actual" } count:1 type:[IOSClass classWithClass:[NSString class]]]];
  [((FFTDataModelManager *) nil_chk([FFTGlobalState_get_fluidApp__() getDataModelManager])) dataDidChangeWithNSString:@"app.measureManager" withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"mean" } count:1 type:[IOSClass classWithClass:[NSString class]]]];
  [((FFTDataModelManager *) nil_chk([FFTGlobalState_get_fluidApp__() getDataModelManager])) dataDidChangeWithNSString:@"app.measureManager" withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"measureProgress" } count:1 type:[IOSClass classWithClass:[NSString class]]]];
  [((FFTDataModelManager *) nil_chk([FFTGlobalState_get_fluidApp__() getDataModelManager])) dataDidChangeWithNSString:@"app.measureManager" withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"graph" } count:1 type:[IOSClass classWithClass:[NSString class]]]];
}

- (id)init {
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "run", NULL, "V", 0x1, NULL },
    { "init", NULL, NULL, 0x0, NULL },
  };
  static J2ObjcClassInfo _FAMeasureManager_$1_$1 = { "$1", "com.sponberg.app.manager", "MeasureManager$$1", 0x8000, 2, methods, 0, NULL, 0, NULL};
  return &_FAMeasureManager_$1_$1;
}

@end
