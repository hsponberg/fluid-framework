//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src-delomboked/com/sponberg/app/manager/WeatherManager.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/eclipsesource/json/JsonArray.h"
#include "com/eclipsesource/json/JsonObject.h"
#include "com/eclipsesource/json/JsonValue.h"
#include "com/sponberg/app/domain/WeatherDataPoint.h"
#include "com/sponberg/app/manager/WeatherManager.h"
#include "com/sponberg/fluid/FluidApp.h"
#include "com/sponberg/fluid/GlobalState.h"
#include "com/sponberg/fluid/HttpService.h"
#include "com/sponberg/fluid/HttpServiceCallback.h"
#include "com/sponberg/fluid/ResourceService.h"
#include "com/sponberg/fluid/SystemService.h"
#include "com/sponberg/fluid/layout/DataModelManager.h"
#include "com/sponberg/fluid/layout/TableList.h"
#include "com/sponberg/fluid/util/JsonUtil.h"
#include "java/io/PrintStream.h"
#include "java/lang/Exception.h"
#include "java/lang/Runnable.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"

@implementation FAWeatherManager

- (void)load__WithFFTFluidApp:(FFTFluidApp *)app {
  [self downloadWeatherAsyncWithFFTFluidApp:app];
}

- (void)downloadWeatherAsyncWithFFTFluidApp:(FFTFluidApp *)app {
  if (useFakeData_) {
    [self getDataFromTestFile];
    return;
  }
  id<FFTHttpServiceCallback> callback = [[FAWeatherManager_$1 alloc] initWithFAWeatherManager:self withFFTFluidApp:app];
  NSString *url = @"https://api.forecast.io/forecast/0eda8b99b6e311d2f3c62aa8eb77cad4/-33.86,151.2111";
  [((id<FFTHttpService>) nil_chk([((FFTFluidApp *) nil_chk(FFTGlobalState_get_fluidApp__())) getHttpService])) getWithNSString:url withJavaUtilHashMap:nil withFFTHttpService_HttpAuthorization:nil withFFTHttpServiceCallback:callback];
}

- (void)getDataFromTestFile {
  id<JavaLangRunnable> r = [[FAWeatherManager_$2 alloc] initWithFAWeatherManager:self];
  [((id<FFTSystemService>) nil_chk([((FFTFluidApp *) nil_chk(FFTGlobalState_get_fluidApp__())) getSystemService])) runOnUiThreadWithJavaLangRunnable:r];
}

- (void)parseDataWithNSString:(NSString *)data {
  dataPoints_ = [[FFTTableList alloc] init];
  FFTJsonValue *valueData = [FFTJsonValue readFromWithNSString:data];
  FFTJsonValue *daily = [((FFTJsonObject *) nil_chk([((FFTJsonValue *) nil_chk(valueData)) asObject])) getWithNSString:@"daily"];
  FFTJsonArray *array = [((FFTJsonValue *) nil_chk([((FFTJsonObject *) nil_chk([((FFTJsonValue *) nil_chk(daily)) asObject])) getWithNSString:@"data"])) asArray];
  for (FFTJsonValue * __strong value in nil_chk(array)) {
    FAWeatherDataPoint *dataPoint = [[FAWeatherDataPoint alloc] init];
    @try {
      [FFTJsonUtil setValuesToWithId:dataPoint withFFTJsonObject:[((FFTJsonValue *) nil_chk(value)) asObject]];
      [dataPoints_ addWithId:dataPoint];
    }
    @catch (JavaLangException *e) {
      [((JavaLangException *) nil_chk(e)) printStackTrace];
    }
  }
  [((FFTDataModelManager *) nil_chk([((FFTFluidApp *) nil_chk(FFTGlobalState_get_fluidApp__())) getDataModelManager])) dataDidChangeWithNSString:@"app.weatherManager" withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"dataPoints" } count:1 type:[IOSClass classWithClass:[NSString class]]]];
}

- (IOSObjectArray *)getSupportedPlatforms {
  return nil;
}

- (FFTTableList *)getDataPoints {
  return self->dataPoints_;
}

- (BOOL)isUseFakeData {
  return self->useFakeData_;
}

- (void)setDataPointsWithFFTTableList:(FFTTableList *)dataPoints {
  self->dataPoints_ = dataPoints;
}

- (void)setUseFakeDataWithBoolean:(BOOL)useFakeData {
  self->useFakeData_ = useFakeData;
}

- (id)init {
  if (self = [super init]) {
    dataPoints_ = [[FFTTableList alloc] init];
    useFakeData_ = YES;
  }
  return self;
}

- (void)copyAllFieldsTo:(FAWeatherManager *)other {
  [super copyAllFieldsTo:other];
  other->dataPoints_ = dataPoints_;
  other->useFakeData_ = useFakeData_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "load__WithFFTFluidApp:", "load", "V", 0x1, NULL },
    { "downloadWeatherAsyncWithFFTFluidApp:", "downloadWeatherAsync", "V", 0x1, NULL },
    { "getDataFromTestFile", NULL, "V", 0x2, NULL },
    { "parseDataWithNSString:", "parseData", "V", 0x2, NULL },
    { "getSupportedPlatforms", NULL, "[Ljava.lang.String;", 0x1, NULL },
    { "getDataPoints", NULL, "Lcom.sponberg.fluid.layout.TableList;", 0x1, NULL },
    { "isUseFakeData", NULL, "Z", 0x1, NULL },
    { "setDataPointsWithFFTTableList:", "setDataPoints", "V", 0x1, NULL },
    { "setUseFakeDataWithBoolean:", "setUseFakeData", "V", 0x1, NULL },
    { "init", NULL, NULL, 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "dataPoints_", NULL, 0x0, "Lcom.sponberg.fluid.layout.TableList;", NULL,  },
    { "useFakeData_", NULL, 0x0, "Z", NULL,  },
    { "kFetchDataTimeout_", NULL, 0x18, "I", NULL, .constantValue.asInt = FAWeatherManager_kFetchDataTimeout },
  };
  static J2ObjcClassInfo _FAWeatherManager = { "WeatherManager", "com.sponberg.app.manager", NULL, 0x1, 10, methods, 3, fields, 0, NULL};
  return &_FAWeatherManager;
}

@end

@implementation FAWeatherManager_$1

- (void)successWithFFTHttpServiceCallback_HttpResponse:(FFTHttpServiceCallback_HttpResponse *)response {
  id<JavaLangRunnable> r = [[FAWeatherManager_$1_$1 alloc] initWithFAWeatherManager_$1:self withFFTHttpServiceCallback_HttpResponse:response];
  [((id<FFTSystemService>) nil_chk([((FFTFluidApp *) nil_chk(val$app_)) getSystemService])) runOnUiThreadWithJavaLangRunnable:r];
}

- (void)failWithFFTHttpServiceCallback_HttpResponse:(FFTHttpServiceCallback_HttpResponse *)response {
  [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithNSString:[NSString stringWithFormat:@"fail %@", [((FFTHttpServiceCallback_HttpResponse *) nil_chk(response)) getData]]];
}

- (id)initWithFAWeatherManager:(FAWeatherManager *)outer$
               withFFTFluidApp:(FFTFluidApp *)capture$0 {
  this$0_ = outer$;
  val$app_ = capture$0;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "successWithFFTHttpServiceCallback_HttpResponse:", "success", "V", 0x1, NULL },
    { "failWithFFTHttpServiceCallback_HttpResponse:", "fail", "V", 0x1, NULL },
    { "initWithFAWeatherManager:withFFTFluidApp:", "init", NULL, 0x0, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lcom.sponberg.app.manager.WeatherManager;", NULL,  },
    { "val$app_", NULL, 0x1012, "Lcom.sponberg.fluid.FluidApp;", NULL,  },
  };
  static J2ObjcClassInfo _FAWeatherManager_$1 = { "$1", "com.sponberg.app.manager", "WeatherManager", 0x8000, 3, methods, 2, fields, 0, NULL};
  return &_FAWeatherManager_$1;
}

@end

@implementation FAWeatherManager_$1_$1

- (void)run {
  if ([((FFTHttpServiceCallback_HttpResponse *) nil_chk(val$response_)) getCode] == 200) {
    [this$0_->this$0_ parseDataWithNSString:[val$response_ getData]];
  }
  else {
    [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithNSString:[NSString stringWithFormat:@"unsuccessful %d %@", [val$response_ getCode], [val$response_ getData]]];
  }
}

- (id)initWithFAWeatherManager_$1:(FAWeatherManager_$1 *)outer$
withFFTHttpServiceCallback_HttpResponse:(FFTHttpServiceCallback_HttpResponse *)capture$0 {
  this$0_ = outer$;
  val$response_ = capture$0;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "run", NULL, "V", 0x1, NULL },
    { "initWithFAWeatherManager_$1:withFFTHttpServiceCallback_HttpResponse:", "init", NULL, 0x0, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lcom.sponberg.app.manager.WeatherManager$1;", NULL,  },
    { "val$response_", NULL, 0x1012, "Lcom.sponberg.fluid.HttpServiceCallback$HttpResponse;", NULL,  },
  };
  static J2ObjcClassInfo _FAWeatherManager_$1_$1 = { "$1", "com.sponberg.app.manager", "WeatherManager$$1", 0x8000, 2, methods, 2, fields, 0, NULL};
  return &_FAWeatherManager_$1_$1;
}

@end

@implementation FAWeatherManager_$2

- (void)run {
  @try {
    [JavaLangThread sleepWithLong:FAWeatherManager_kFetchDataTimeout];
    NSString *data = [((id<FFTResourceService>) nil_chk([((FFTFluidApp *) nil_chk(FFTGlobalState_get_fluidApp__())) getResourceService])) getResourceAsStringWithNSString:@"" withNSString:@"testDataPoints.txt"];
    [this$0_ parseDataWithNSString:data];
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
  }
}

- (id)initWithFAWeatherManager:(FAWeatherManager *)outer$ {
  this$0_ = outer$;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "run", NULL, "V", 0x1, NULL },
    { "initWithFAWeatherManager:", "init", NULL, 0x0, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lcom.sponberg.app.manager.WeatherManager;", NULL,  },
  };
  static J2ObjcClassInfo _FAWeatherManager_$2 = { "$2", "com.sponberg.app.manager", "WeatherManager", 0x8000, 2, methods, 1, fields, 0, NULL};
  return &_FAWeatherManager_$2;
}

@end
