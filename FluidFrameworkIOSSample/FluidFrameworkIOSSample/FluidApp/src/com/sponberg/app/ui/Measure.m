//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src-delomboked/com/sponberg/app/ui/Measure.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/sponberg/app/SampleApp.h"
#include "com/sponberg/app/manager/MeasureManager.h"
#include "com/sponberg/app/ui/Measure.h"
#include "com/sponberg/app/ui/Screen.h"
#include "com/sponberg/fluid/FluidApp.h"
#include "com/sponberg/fluid/layout/ActionListener.h"

@implementation FAMeasure

- (void)load__WithFFTFluidApp:(FFTFluidApp *)app {
  (void) [((FFTFluidApp_AddActionListenerBuilder *) nil_chk([((FFTFluidApp *) nil_chk(app)) addActionListenerWithNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ FAScreen_get_Measure_(), FAScreen_ScreenMeasure_get_Start_() } count:2 type:[IOSClass classWithClass:[NSString class]]]])) listenerWithFFTActionListener:[[FAMeasure_$1 alloc] initWithFFTFluidApp:app]];
  (void) [((FFTFluidApp_AddWebviewActionListenerBuilder *) nil_chk([app addWebviewActionListenerWithNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ FAScreen_get_Measure_(), FAScreen_ScreenMeasure_get_Graph_(), @"startMeasurement" } count:3 type:[IOSClass classWithClass:[NSString class]]]])) listenerWithFFTWebviewActionListener:[[FAMeasure_$2 alloc] initWithFFTFluidApp:app]];
}

- (IOSObjectArray *)getSupportedPlatforms {
  return nil;
}

- (id)init {
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "load__WithFFTFluidApp:", "load", "V", 0x1, NULL },
    { "getSupportedPlatforms", NULL, "[Ljava.lang.String;", 0x1, NULL },
    { "init", NULL, NULL, 0x1, NULL },
  };
  static J2ObjcClassInfo _FAMeasure = { "Measure", "com.sponberg.app.ui", NULL, 0x1, 3, methods, 0, NULL, 0, NULL};
  return &_FAMeasure;
}

@end

@implementation FAMeasure_$1

- (void)userTappedWithFFTActionListener_EventInfo:(FFTActionListener_EventInfo *)info {
  [((FAMeasureManager *) nil_chk([((FASampleApp *) nil_chk(((FASampleApp *) check_class_cast(val$app_, [FASampleApp class])))) getMeasureManager])) startMeasurement];
}

- (id)initWithFFTFluidApp:(FFTFluidApp *)capture$0 {
  val$app_ = capture$0;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "userTappedWithFFTActionListener_EventInfo:", "userTapped", "V", 0x1, NULL },
    { "initWithFFTFluidApp:", "init", NULL, 0x0, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "val$app_", NULL, 0x1012, "Lcom.sponberg.fluid.FluidApp;", NULL,  },
  };
  static J2ObjcClassInfo _FAMeasure_$1 = { "$1", "com.sponberg.app.ui", "Measure", 0x8000, 2, methods, 1, fields, 0, NULL};
  return &_FAMeasure_$1;
}

@end

@implementation FAMeasure_$2

- (void)actionPerformedWithNSString:(NSString *)userInfo {
  [((FAMeasureManager *) nil_chk([((FASampleApp *) nil_chk(((FASampleApp *) check_class_cast(val$app_, [FASampleApp class])))) getMeasureManager])) startMeasurement];
}

- (id)initWithFFTFluidApp:(FFTFluidApp *)capture$0 {
  val$app_ = capture$0;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "actionPerformedWithNSString:", "actionPerformed", "V", 0x1, NULL },
    { "initWithFFTFluidApp:", "init", NULL, 0x0, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "val$app_", NULL, 0x1012, "Lcom.sponberg.fluid.FluidApp;", NULL,  },
  };
  static J2ObjcClassInfo _FAMeasure_$2 = { "$2", "com.sponberg.app.ui", "Measure", 0x8000, 2, methods, 1, fields, 0, NULL};
  return &_FAMeasure_$2;
}

@end
